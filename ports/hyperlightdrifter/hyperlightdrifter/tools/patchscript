#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="game.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggdec"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        output=$(xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patch/hyperlightdrifter.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
    else
        echo "No data.win file found to patch!"
    fi
}
compress_audio() {
    # Find and compress all .ogg files in the /assets directory
    find "$DATADIR" -type f -name "*.ogg" | while read -r file; do
    # Create a temporary file for the compressed version
    temp_file="${file%.ogg}_temp.ogg"

    # Decode the .ogg file and encode it with the specified bitrate
    "$TOOLDIR/oggdec" -o - "$file" | "$TOOLDIR/oggenc" -q 0 -o "$temp_file" -
    if [ $? -eq 0 ]; then
        # Replace the original file with the compressed version if successful
        mv "$temp_file" "$file"
        echo "Compressed: $file to quality 0"
    else
        echo "Failed to compress: $file" >&2
        rm -f "$temp_file" # Clean up the temp file in case of error
    fi
    done

    echo "All .ogg files have been processed."
    sleep 3    
}

zip_archive() {
        rm -rf ./assets/cttVideoPlayer
		zip -r $DATAFILE ./assets/game.droid
		rm -f ./assets/game.droid
        zip -r -0 $DATAFILE ./assets/
		rm -rf ./assets
        mkdir -p saves
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
    sleep 1
    echo "Applying xdelta patch"
    apply_xdelta
    sleep 1
	compress_audio
	sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game