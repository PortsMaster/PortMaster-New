#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="ufo50.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

unzip_audiogroups() {
    # Unzip from $DATAFILE into $DATADIR
    echo "Unzipping ${DATAFILE}..."
    mkdir -p assets
    unzip -j -o "$DATAFILE" "assets/*.dat" -d "$DATADIR"
    if [ $? -eq 0 ]; then
        echo "Unzipped successfully to $DATADIR."
    else
        echo "Failed to unzip file."
        mv $LOGFILE $LOGERR
        exit 1
    fi
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        # v1.7.5
        output=$(xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patches/ufo50.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            mv $LOGFILE $LOGERR
            exit 1
        fi
    else
        echo "No data.win file found to patch!"
    fi
}

compress_audio() {
    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    if [ "$PREPATCH" != 1 ]; then
        echo "Running GMTools on data and audiogroups."
        $PYTHON ./tools/gmKtool.py -vvv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"
    else
        echo "Running GMTools on data file only."
        $PYTHON ./tools/gmKtool.py -v -O 0 -m 1000 -b 64 -r -d "$TMPDIR" "$DATADIR/game.droid"
    fi

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
    fi
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        mkdir -p saves
        rm -rf ./assets/*
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
    
    # Check if we're using a prepatched game
    if unzip -l "$DATAFILE" "assets/*" | grep -q "assets/.*\.dat"; then
        echo "Prepatched game detected." && sleep 1
        PREPATCH=1
        unzip_audiogroups
    fi
    
    echo "Applying xdelta patch"
    apply_xdelta
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game