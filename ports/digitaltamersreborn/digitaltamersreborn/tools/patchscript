#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    $ESUDO umount "$TOOLKIT"
    echo "Patching process failed."
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="dtr.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

prepare_files() {
    # Unzip the executable if it exists
    echo "Unpacking the game..."
    ./tools/7za x "$DATADIR/DigitalTamers ReBorn - v2.2.2 - (PC).exe" -o"$DATADIR" -y
    rm -f "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR/.gitkeep"
    [ -f "$DATADIR/splash.png" ] && mv "$DATADIR/splash.png" .
    echo "Removed unnecessary files"
    sleep 1
}

unzip_patch() {
    echo "Unzipping the patch file..."
    if [ -f "./tools/patches/dtr.zip.001" ]; then
        ./tools/7za x ./tools/patches/dtr.zip.001 -o./tools/patches
        if [ $? -eq 0 ]; then
            echo "Patch file successfully extracted."
            rm ./tools/patches/dtr.zip.*
        else
            echo "Failed to extract multi-part archive."
            exit 1
        fi
    else
        echo "Patch archive not found!"
        exit 1
    fi
}

apply_xdelta() {
    echo "Applying xdelta patch"
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ] && [ -f "$TOOLDIR/patches/dtr.xdelta" ]; then
        output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "$TOOLDIR/patches/dtr.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
            sleep 1
        else
            echo "Failed to apply patch"
            echo "$output"
            mv $LOGFILE $LOGERR
            sleep 1
            exit 1
        fi
    else
        echo "No data.win file found to patch or no patch file provided."
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
        sleep 1
    fi
}

compress_audio() {  
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        patch_failure
    fi
}

zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/
        mkdir -p saves
        rm -rf assets
        sleep 1
}

process_game() {
    echo "Preparing game..."
    prepare_files || patch_failure 
    unzip_patch || patch_failure
    echo "Applying xdelta patch..."
    apply_xdelta || patch_failure
    echo "Compressing audio..."
    compress_audio || patch_failure
    sleep 1
    echo "Finishing up..."
    zip_archive || patch_failure

    # Unmount runtimes
    $ESUDO umount "$TOOLKIT
	
    # Final completion message
    echo "Patching process complete!"
}

process_game
