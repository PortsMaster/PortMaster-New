#!/bin/bash

# Set paths and vars
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/install_log.txt"
EXTRACTOR="tools/7zzs"
OUTPUT_DIR="assets"
DATAFILE="interstatedrifter.port"
INSTALL_COMPLETE="install_completed"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "-----------------------------"
echo "Game Installation Script"
echo "-----------------------------"
echo "GAMEDIR is set to: $GAMEDIR"
echo "Log file: $LOGFILE"
echo "Starting process at: $(date)"

# Function to check for errors
check_success() {
    if [[ $? -ne 0 ]]; then
        echo "Error: $1"
        exit 1
    fi
}

# Check if extractor exists
if [[ ! -f "$EXTRACTOR" ]]; then
    echo "Error: Extractor '$EXTRACTOR' not found!"
    exit 1
fi
echo "Extractor found: $EXTRACTOR"
sleep 1

# Find .exe files inside the assets directory (OUTPUT_DIR)
set -- "$OUTPUT_DIR"/*.exe

# If no file matches, the glob will not expand, so "$1" equals "$OUTPUT_DIR/*.exe"
if [ "$#" -eq 0 ] || [ "$1" = "$OUTPUT_DIR/*.exe" ]; then
    echo "Error: No .exe file found in '$OUTPUT_DIR'!"
    exit 1
elif [ "$#" -gt 1 ]; then
    echo "Error: Multiple .exe files found in '$OUTPUT_DIR'. Please keep only one!"
    exit 1
fi

ARCHIVE="$1"
echo "Game archive found: $ARCHIVE"
sleep 1

# Extract the archive
echo "Extracting game files..."
"$EXTRACTOR" x "$ARCHIVE" -o"$OUTPUT_DIR" -y
check_success "Extraction failed!"
echo "Extraction complete!"
sleep 1

# Rename data.win if it exists
if [[ -f "./assets/data.win" ]]; then
    echo "Renaming data.win to game.droid..."
    mv assets/data.win assets/game.droid
    check_success "Failed to rename data.win!"
    sleep 1
else
    echo "Warning: data.win not found, skipping rename."
fi

# Create ZIP archive
echo "Creating game package..."
zip -r -0 "$DATAFILE" ./assets/
check_success "Failed to create $DATAFILE!"
echo "Game package created: $DATAFILE"
sleep 1

# Clean up assets folder
echo "Cleaning up temporary files..."
rm -rf ./assets
mkdir -p saves
check_success "Failed to clean up assets!"
echo "Cleanup complete!"
sleep 1

# Create install completion flag
touch "$INSTALL_COMPLETE"
echo "Installation completed successfully!"
echo "-----------------------------"
echo "Process finished at: $(date)"
