#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patcherr.txt"

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    # Exit script, or return if sourced
    return 1 2>/dev/null || exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="haque.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

prepare_files() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.so $DATADIR/*.exe $DATADIR/*.dll $DATADIR/*.icns \
           $DATADIR/.gitkeep $DATADIR/gamedat $DATADIR/runner $DATADIR/English.lproj
    echo "Removed unnecessary files"
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    elif [ -f "$DATADIR/game.unx" ]; then
        mv "$DATADIR/game.unx" "$DATADIR/game.droid"
    elif [ -f "$DATADIR/game.ios" ]; then
        mv "$DATADIR/game.ios" "$DATADIR/game.droid"
    fi
    
    # Edit options.ini
    if [ -f "$DATADIR/options.ini" ]; then
        if grep -q '^CreateTexturesOnDemand=' "$DATADIR/options.ini"; then
            sed -i 's/^CreateTexturesOnDemand=.*/CreateTexturesOnDemand=1/' "$DATADIR/options.ini"
        else
            echo 'CreateTexturesOnDemand=1' >> "$DATADIR/options.ini"
        fi
    else
        echo "Error: options.ini missing!"
        mv "$PATCHLOG" "$PATCHERR"
        exit 1
    fi
    sleep 1

    if [ ! -d "$DATADIR/Haque_Text" ]; then
        # Try to locate the Haque_Text.zip file (case-insensitive)
        file=$(find "$DATADIR" -maxdepth 1 -iname "Haque_Text.zip" | head -n 1)

        if [ -n "$file" ]; then
            unzip "$file" -d "$DATADIR"
            find "$DATADIR/Haque_Text/" -type f -exec dos2unix -u {} \;
            rm -f "$file"
        else
            echo "Couldn't find Haque_Text.zip! Game will not run!"
            sleep 2
            exit 1
        fi
    else
        find "$DATADIR/Haque_Text/" -type f -exec dos2unix -u {} \;
    fi
}

compress_audio() {  
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        patch_failure
    fi
}

zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/
        mkdir -p saves
        rm -rf $DATADIR/*
        sleep 1
}

process_game() {
    prepare_files || { patch_failure; return 1; }
    compress_audio || { patch_failure; return 1; }
    zip_archive || { patch_failure; return 1; }
}

# Call the function
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi

# Unmount runtimes
$ESUDO umount "$DOTNETDIR" 2>/dev/null || true
$ESUDO umount "$TOOLKIT" 2>/dev/null || true
