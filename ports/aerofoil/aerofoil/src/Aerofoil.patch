diff --git a/AerofoilSDL/GpDisplayDriver_SDL_GL2.cpp b/AerofoilSDL/GpDisplayDriver_SDL_GL2.cpp
index 8f3894c..523ec61 100644
--- a/AerofoilSDL/GpDisplayDriver_SDL_GL2.cpp
+++ b/AerofoilSDL/GpDisplayDriver_SDL_GL2.cpp
@@ -708,8 +708,21 @@ public:
 	const GpGLFunctions *GetGLFunctions() const;
 
 	template<GLuint TShaderType> GpComPtr<GpGLShader<TShaderType> > CreateShader(const char *shaderSrc);
+	void InitGLCursor();
+	void DrawGLCursor();
 
 private:
+	bool use_gl_cursor = true;
+	GpDisplayDriverSurface_GL2 * cursor_surf = NULL;
+	const int cursor_W = 6;
+	const int cursor_H = 6;
+	const char c_template[6][6] = {{200, 225, 255, 255, 225, 200},
+								   {225, 150, 100, 100, 150, 255},
+								   {255, 100,   0,   0, 100, 255},
+								   {255, 100,   0,   0, 100, 255},
+								   {225, 150, 100, 100, 150, 255},
+								   {200, 225, 255, 255, 225, 200}};
+
 	struct DrawQuadPixelFloatConstants
 	{
 		float m_modulation[4];
@@ -2054,6 +2067,7 @@ IGpDisplayDriverSurface *GpDisplayDriver_SDL_GL2::CreateSurface(size_t width, si
 		if (m_firstSurface == nullptr)
 			m_firstSurface = surface;
 	}
+
 	return surface;
 }
 
@@ -2244,6 +2258,9 @@ IGpCursor *GpDisplayDriver_SDL_GL2::CreateColorCursor(size_t width, size_t heigh
 
 void GpDisplayDriver_SDL_GL2::SetCursor(IGpCursor *cursor)
 {
+	if (use_gl_cursor)
+		return;
+
 	GpCursor_SDL2 *sdlCursor = static_cast<GpCursor_SDL2*>(cursor);
 
 	sdlCursor->IncRef();
@@ -2256,6 +2273,9 @@ void GpDisplayDriver_SDL_GL2::SetCursor(IGpCursor *cursor)
 
 void GpDisplayDriver_SDL_GL2::SetStandardCursor(EGpStandardCursor_t standardCursor)
 {
+	if (use_gl_cursor)
+		return;
+
 	if (m_pendingCursor)
 	{
 		m_pendingCursor->DecRef();
@@ -3005,6 +3025,52 @@ bool GpDisplayDriver_SDL_GL2::BlitQuadProgram::Link(GpDisplayDriver_SDL_GL2 *dri
 	return true;
 }
 
+void GpDisplayDriver_SDL_GL2::InitGLCursor() {
+	const int n_bytes = 4;
+	int x, y;
+	float d2;
+
+	int pitch = cursor_W * n_bytes;
+
+	const char* env_var = getenv("USE_GL_CURSOR");
+	if (env_var == nullptr) {
+		use_gl_cursor = true;
+	} else {
+		use_gl_cursor = (strcmp(env_var, "true")==0);
+	}
+	
+	if (!use_gl_cursor)
+		return;
+
+	IGpDisplayDriver::SurfaceInvalidateCallback_t dummyFunc;
+	cursor_surf = static_cast<GpDisplayDriverSurface_GL2*>(GpDisplayDriver_SDL_GL2::CreateSurface(cursor_W, cursor_H, pitch, GpPixelFormats::kRGB32, dummyFunc, this));
+	GpGLTexture * tex = cursor_surf->GetTexture();
+
+	char c_pixels [cursor_H][cursor_W][n_bytes];
+	for (int i = 0 ; i < cursor_H; i++) {
+	    for (int j = 0; j < cursor_W; j++) {
+			c_pixels[i][j][0] = c_template[i][j];
+			c_pixels[i][j][1] = c_template[i][j];
+			c_pixels[i][j][2] = c_template[i][j];
+			c_pixels[i][j][3] = 255;
+
+		}
+    }
+
+	cursor_surf->UploadEntire(c_pixels, pitch);
+}
+
+void GpDisplayDriver_SDL_GL2::DrawGLCursor() {
+    int x, y;
+
+	if (!use_gl_cursor) {
+		return;
+	}
+
+    SDL_GetMouseState(&x, &y);
+    DrawSurface(cursor_surf, x/m_pixelScaleX, y/m_pixelScaleY, cursor_W, cursor_H, NULL);
+}
+
 bool GpDisplayDriver_SDL_GL2::SyncRender()
 {
 	if (m_frameTimeAccumulated >= m_frameTimeSliceSize)
@@ -3039,6 +3105,10 @@ bool GpDisplayDriver_SDL_GL2::SyncRender()
 
 	m_properties.m_renderFunc(m_properties.m_renderFuncContext);
 
+	if (!cursor_surf)
+		InitGLCursor();
+	DrawGLCursor();
+
 	ScaleVirtualScreen();
 
 	CheckGLError(m_gl, m_properties.m_logger);
diff --git a/PortabilityLayer/ScopedPtr.h b/PortabilityLayer/ScopedPtr.h
index a08451a..744b9b1 100644
--- a/PortabilityLayer/ScopedPtr.h
+++ b/PortabilityLayer/ScopedPtr.h
@@ -20,11 +20,11 @@ namespace PortabilityLayer
 		const T *operator->() const;
 
 		void Set(T *ref);
-
-	private:
-		ScopedPtr(const ScopedPtr<T> &other) GP_DELETED;
-		void operator=(const ScopedPtr<T> &other) GP_DELETED;
+		ScopedPtr(const ScopedPtr<T> &other);
+		void operator=(const ScopedPtr<T> &other);
 		T *m_ref;
+	// private:
+
 	};
 }
 
diff --git a/gpr2gpa/gpr2gpa.cpp b/gpr2gpa/gpr2gpa.cpp
index 2c1ff73..a678b8d 100644
--- a/gpr2gpa/gpr2gpa.cpp
+++ b/gpr2gpa/gpr2gpa.cpp
@@ -35,6 +35,25 @@
 #include <vector>
 #include <algorithm>
 
+#include <sstream>
+struct StreamHelper
+{
+    std::ostringstream stream;
+    template< typename T >
+    StreamHelper& operator<<( const T& value )
+    {
+        stream << value; return *this;
+    }
+    std::string str() const
+    {
+        return stream.str();
+    }
+    operator std::string() const
+    {
+        return stream.str();
+    }
+};
+
 enum AudioCompressionCodecID
 {
 	AudioCompressionCodecID_VariableRate = -2,
@@ -2456,7 +2475,7 @@ int ConvertSingleFile(const char *resPath, const PortabilityLayer::CombinedTimes
 			if (typeList.m_resType == pictTypeID || typeList.m_resType == dateTypeID)
 			{
 				std::string resName = (
-					std::ostringstream() << resTag.m_id << '/' << res.m_resID << ".bmp"
+					StreamHelper() << resTag.m_id << '/' << res.m_resID << ".bmp"
 				).str();
 
 				if (ContainsName(reservedNames, resName.c_str()))
@@ -2474,7 +2493,7 @@ int ConvertSingleFile(const char *resPath, const PortabilityLayer::CombinedTimes
 			else if (typeList.m_resType == sndTypeID)
 			{
 				std::string resName = (
-					std::ostringstream() << resTag.m_id << '/' << res.m_resID << ".wav"
+					StreamHelper() << resTag.m_id << '/' << res.m_resID << ".wav"
 				).str();
 
 				if (ContainsName(reservedNames, resName.c_str()))
@@ -2492,7 +2511,7 @@ int ConvertSingleFile(const char *resPath, const PortabilityLayer::CombinedTimes
 			else if (typeList.m_resType == indexStringTypeID)
 			{
 				std::string resName = (
-					std::ostringstream() << resTag.m_id << '/' << res.m_resID << ".txt"
+					StreamHelper() << resTag.m_id << '/' << res.m_resID << ".txt"
 				).str();
 
 				if (ContainsName(reservedNames, resName.c_str()))
@@ -2508,7 +2527,7 @@ int ConvertSingleFile(const char *resPath, const PortabilityLayer::CombinedTimes
 			else if (typeList.m_resType == ditlTypeID)
 			{
 				std::string resName = (
-					std::ostringstream() << resTag.m_id << '/' << res.m_resID << ".json"
+					StreamHelper() << resTag.m_id << '/' << res.m_resID << ".json"
 				).str();
 
 				if (ContainsName(reservedNames, resName.c_str()))
@@ -2531,7 +2550,7 @@ int ConvertSingleFile(const char *resPath, const PortabilityLayer::CombinedTimes
 					if (typeList.m_resType == iconSpec.m_resTypeID)
 					{
 						std::string resName = (
-							std::ostringstream() << resTag.m_id << '/' << res.m_resID << ".bmp"
+							StreamHelper() << resTag.m_id << '/' << res.m_resID << ".bmp"
 						).str();
 
 						if (!ContainsName(reservedNames, resName.c_str()))
@@ -2553,7 +2572,7 @@ int ConvertSingleFile(const char *resPath, const PortabilityLayer::CombinedTimes
 				if (!isIcon)
 				{
 					std::string resName = (
-						std::ostringstream() << resTag.m_id << '/' << res.m_resID << ".bin"
+						StreamHelper() << resTag.m_id << '/' << res.m_resID << ".bin"
 					).str();
 
 					if (ContainsName(reservedNames, resName.c_str()))
