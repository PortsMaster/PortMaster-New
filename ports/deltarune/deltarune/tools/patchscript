#!/bin/bash

# Set GAMEDIR and logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
rm -f "$LOGFILE"
rm -f "$LOGERR"
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export INSTALLDIR="$GAMEDIR/assets/install"
export ASSETDIR="$GAMEDIR/assets"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 755 "$TOOLDIR/gmKtool.py" "$TOOLDIR/oggenc" "$TOOLDIR/oggdec"

cd "$GAMEDIR" || exit

# SANITIZE THE INSTALL DIRECTORIES
sanitize() {
    echo "Sanitizing $ASSETDIR"
    
    # Check if data.win exists in ASSETDIR or its subfolders
    if [ -f "$ASSETDIR/data.win" ] || [ -n "$(find "$ASSETDIR" -maxdepth 2 -type f -name "data.win" -print 2>/dev/null)" ]; then
        # Move files to $INSTALLDIR, excluding install and archives
        move_files
    elif [ -f "$INSTALLDIR/data.win" ] || [ -n "$(find "$INSTALLDIR" -maxdepth 2 -type f -name "data.win" -print 2>/dev/null)" ]; then
        echo "Found game assets, continuing."
    else
        echo "Unable to find game data! Cannot patch!"
        patch_failure
    fi
    
    # Check if base.port exists in $INSTALLDIR
    if [ ! -e "$INSTALLDIR/base.port" ]; then
        echo "Error: base.port not found in $INSTALLDIR!"
        patch_failure
    fi
}

# MOVE GAME DATA FROM ASSETS TO INSTALL
move_files() {
    echo "Moving files from $ASSETDIR to $INSTALLDIR"

    # Loop through all files and directories in $GAMEDIR/assets/
    for item in "$ASSETDIR"/*; do
        # Skip if it's the install folder
        if [ "$(basename "$item")" = "install" ]; then
            continue
        fi

        # If it's a directory, move it
        if [ -d "$item" ]; then
            mv "$item" "$INSTALLDIR/"
            continue
        fi

        # Check if it's a zip archive using the file command
        if file "$item" | grep -q "Zip archive"; then
            continue
        fi

        # Move non-archive files
        if ! mv "$item" "$INSTALLDIR/"; then
            echo "Failed to move $item to $INSTALLDIR!" >&2
        fi
    done
}

# MOVE SHARED FILES TO SAVEDIR
move_shared_files() {
    # Files shared among all the chapters must be moved to the saves folder
    mkdir -p "$GAMEDIR/saves"
    if [ -d "$INSTALLDIR/mus" ]; then
        rm -rf "$GAMEDIR/saves/mus"
        mv "$INSTALLDIR/mus" "$GAMEDIR/saves/"
        echo "Moved shared files to $GAMEDIR/saves/"
    fi
}

# PROCESS GAME LAUNCHER
process_launcher() {
    GAMEFILE="deltarune"
    echo "============================="
    echo "Preparing top-level $GAMEFILE"
    echo "============================="

    # Create assets folder and move top-level files (except subfolders and base.port)
    mkdir -p "$INSTALLDIR/assets"
    find "$INSTALLDIR" -maxdepth 1 -type f -not -name "base.port" -exec mv {} "$INSTALLDIR/assets/" \;
        
    # Move shared files (mus folder) to $GAMEDIR/saves
    move_shared_files

    # Process the assets folder
    process_assets
}

# PROCESS GAME ASSETS
process_assets() {
    echo "Processing assets for $GAMEFILE"

    # Clean up unnecessary files
    clean_assets

    # Process data.win if it exists
    if [ -f "$INSTALLDIR/assets/data.win" ]; then
        # DISABLE APPLYING XDELTA UNTIL NECESSARY
        #echo "Applying xdelta patch for $GAMEFILE"
        #apply_xdelta || { echo "Patching process failed."; exit 1; }
        mv "$INSTALLDIR/assets/data.win" "$INSTALLDIR/assets/game.droid"
        
        # Compress audio
        echo "Compressing audio for $GAMEFILE..."
        compress_audio || { echo "Patching process failed."; exit 1; }
        
        # Zip and finalize
        echo "Finishing up for $GAMEFILE..."
        zip_archive || { echo "Patching process failed."; exit 1; }
        rm -rf "$INSTALLDIR/assets"  # Clean up temporary assets folder
        echo "Finished processing $GAMEFILE!"
    else
        echo "ERROR: No data.win file in $INSTALLDIR/$GAMEFILE"
        rm -rf "$INSTALLDIR/assets"
        patch_failure
    fi
}

# CLEAN GAME ASSETS
clean_assets() {
    find "$INSTALLDIR/assets" -type f \( -name "*.exe" -o -name "*.dll" \) -exec rm -f {} \; 2>>"$LOGERR"
    echo "Removed unnecessary files from $INSTALLDIR/$GAMEFILE"
}

# APPLY XDELTA PATCHES
apply_xdelta() {
    if [ -f "$INSTALLDIR/assets/data.win" ]; then
        output=$("$controlfolder"/xdelta3 -d -s "$INSTALLDIR/assets/data.win" -f "$TOOLDIR/patches/$GAMEFILE.xdelta" "$INSTALLDIR/assets/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully for $GAMEFILE"
            echo "$output"
            rm -f "$INSTALLDIR/assets/data.win"
        else
            echo "Failed to apply patch for $GAMEFILE"
            echo "$output"
            patch_failure
        fi
    else
        echo "No data.win file found to patch for $GAMEFILE!"
        patch_failure
    fi
}

# COMPRESS GAME AUDIO
compress_audio() {
    mkdir -p "$TMPDIR"

    echo "Running GMTools on data and audiogroups for $GAMEFILE."
    
    if $PYTHON "$TOOLDIR/gmKtool.py" -v -m 1000 -r -b 64 -d "$TMPDIR" "$INSTALLDIR/assets/game.droid"; then
        mv "$TMPDIR/"* "$INSTALLDIR/assets/" && rm -rf "$TMPDIR"
        echo "Audio compression applied successfully for $GAMEFILE."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rm -rf "$TMPDIR"
        patch_failure
    fi
}

# FINALIZE PORT ARCHIVE
zip_archive() {
    # Copy base.port and zip assets into it
    cp "$INSTALLDIR/base.port" "$INSTALLDIR/$GAMEFILE.zip"
    cd "$INSTALLDIR" && "$ZIP" -u -r -0 "$GAMEFILE.zip" assets/
    cd "$GAMEDIR" || exit
    # Move it to $GAMEDIR/assets
    mv "$INSTALLDIR/$GAMEFILE.zip" "$GAMEDIR/assets/$GAMEFILE"
}

# PATCHING FAILED
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    echo "Patching process failed."
    exit 1
}

# MAIN LOOP
process_game() {

    # Start by sanitizing asset dir
    sanitize
    
    # If there's a $INSTALLDIR/data.win then it must be the launcher. Process that.
    if [ -f "$INSTALLDIR/data.win" ]; then
        process_launcher
    elif [ ! -f "$ASSETDIR/deltarune" ]; then
        # Push a warning if we don't have the launcher, but continue processing subfolders
        echo "Warning! No launcher found! Will be unable to start game!"
        sleep 2
    fi

    # Process chapter subfolders in assets/install
    subfolders=$(find "$INSTALLDIR" -maxdepth 1 -type d -not -path "$INSTALLDIR" | sort)
    if [ -n "$subfolders" ]; then
        for subfolder in $subfolders; do
            if [ ! -f "$subfolder/data.win" ]; then
                echo "Warning: Skipping $subfolder, no data.win found"
                continue
            else
                GAMEFILE=$(basename "$subfolder")
                echo "====================================="
                echo "Preparing subfolder: $GAMEFILE"
                echo "====================================="

                # Rename subfolder to assets and process it
                mv "$subfolder" "$INSTALLDIR/assets"
                process_assets
            fi
        done
    fi
}

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

process_game
