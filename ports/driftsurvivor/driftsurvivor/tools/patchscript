#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patchlog_error.txt"
START_TIME=$(date +%s)

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="game.port"
export TMPDIR="$GAMEDIR/tmp"

prepare_system() {
    # Test for commands: python, zip
    PYTHON=$(which python3)
    if [ -z "$PYTHON" ]; then
        echo "Missing Python!"
        return 1
    fi
    
    # Mount the GMToolkit runtime
    TOOLKIT="$HOME/gmtoolkit"
    RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
    if [ -f "$RUNTIME" ]; then
        $ESUDO mkdir -p "$TOOLKIT"
        $ESUDO umount "$TOOLKIT" 2>/dev/null || true
        $ESUDO mount "$RUNTIME" "$TOOLKIT"
    else
        echo "This port requires the GMToolkit runtime. Please download it."
        return 1
    fi

    # Mount the dotnet runtime
    DOTNETDIR="$HOME/mono"
    DOTNETFILE="$controlfolder/libs/dotnet-8.0.12.squashfs"
    if [ -f "$DOTNETFILE" ]; then
        $ESUDO mkdir -p "$DOTNETDIR"
        $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
        $ESUDO mount "$DOTNETFILE" "$DOTNETDIR"
    else
        echo "This port requires the Dotnet runtime. Please download it."
        return 1
    fi
    
    # Attempt to get SAVEDIR from gmloader.json using jq
    if command -v jq >/dev/null 2>&1; then
        SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
    else
        SAVEDIR="$GAMEDIR/saves"
    fi
    
    # Exports
    export PYTHON
    export SAVEDIR
    export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
    export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
}

# Prepare game data
# If there are audiogroups in the game.port file, unzip them
prepare_files() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
}

# Replace game code entries for data.win
replace_code() {
    # Build --code args from all gml files
    CODEARGS=()
    for file in "$GAMEDIR/tools/gml/"*.gml; do
        [ -f "$file" ] || continue
        entry=$(basename "$file" .gml)
        echo "Adding modified gml script: $file"
        CODEARGS+=(--code "$entry=$file")
    done

    # Replace scripts
    if dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" replace "$DATADIR/data.win" -o "$DATADIR/data2.win" "${CODEARGS[@]}"; then
        echo "Successfully replaced gml scripts."
        mv -f "$DATADIR/data2.win" "$DATADIR/data.win"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    else
        echo "Failed to replace gml scripts."
        return 1
    fi
}

# Compress audio files inside datafile and audiogroups
compress_audio() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Test for data.win
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    fi

    # Run the compression tool
    PYTHON=$(which python3)
    if [ "$PREPATCH" != 1 ]; then
        echo "Running GMTools on data and audiogroups."
        $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"
    else
        echo "Running GMTools on data file only."
        $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -O 0 -m 1000 -b 64 -r -d "$TMPDIR" "$DATADIR/game.droid"
    fi

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed
        ."
        rmdir "$TMPDIR"
        return 1
    fi
}

# Zip it all into the .port file
zip_archive() {
    if "$controlfolder/7zzs.${DEVICE_ARCH}" a -tzip -aoa -mx=0 "$GAMEDIR/$DATAFILE" "$DATADIR"; then
        rm -rf "$DATADIR"/*
    else
        echo "Failed to create $DATAFILE."
        return 1
    fi
}

# Cleanup function
cleanup() {
    rm -rf "$TMPDIR"
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
}

# Create install completion flag
install_complete() {
	touch "install_completed"
    # Measure time to complete
	END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    echo "Script completed in $DURATION seconds"
	echo "Installation completed successfully!"
	echo "-----------------------------"
	echo "Process finished at: $(date)"
}

# Main function
process_game() {
    prepare_system
	echo "Preparing game files..."
    prepare_files
    echo "Adding modified scripts..."
    replace_code || { cleanup; return 1; }
    echo "Compressing audio..."
    compress_audio || { cleanup; return 1; }
    echo "Finishing up..."
    zip_archive || { cleanup; return 1; }
	install_complete || { cleanup; return 1; }
}

# Call main
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi

# Always run cleanup at the end
cleanup
