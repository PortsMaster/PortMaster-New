#!/bin/bash
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/download.txt"
DEVICE_ARCH="aarch64"
CDN_URL="http://cdn.origin.steamstatic.com/steamlink/rpi/bookworm/arm64/public_build.txt"
CDN_TXT=$(curl -s "$CDN_URL")
PACKAGE_URL=$(echo "$CDN_TXT" | grep -oP '(?<=https://)[^\s]*')
PACKAGE_VERSION=$(echo "$PACKAGE_URL" | grep -oP 'steamlink-rpi-bookworm-arm64-([0-9]+\.[0-9]+\.[0-9]+(?:\.[0-9]+)?)' | cut -d'-' -f4)

# Redirect output and error to the log file
rm -rf $LOGFILE
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Ensure CDN_TXT is not empty
if [[ -z "$CDN_TXT" ]]; then
    echo "Error: CDN_TXT variable is empty. Exiting."
    exit 1
fi

# Track files and directories created
declare -a extracted_files

# Rollback function to clean up
rollback() {
    echo "Rolling back changes..."
    sleep 2
    for file in "${extracted_files[@]}"; do
        if [[ -e "$file" ]]; then
            echo "Removing $file"
            rm -rf "$file"
            sleep 1
        fi
    rm -rf "$GAMEDIR/bin/version_${DEVICE_ARCH}.txt"
    done
    echo "Patching process failed!"
    exit 1
}

download_steamlink() {
    PACKAGE_URL="https://$PACKAGE_URL"
    
    mkdir -p "$GAMEDIR/bin"
    echo "$PACKAGE_URL" > "$GAMEDIR/bin/version_${DEVICE_ARCH}.txt"
    
    echo "Downloading package from: $PACKAGE_URL"
    sleep 2
    
    wget "$PACKAGE_URL" -O steamlink-package.tar.gz || { echo "Error: Download failed."; sleep 2; echo "Patching process failed!"; exit 1; }
    
    echo "Download complete!"
    sleep 2
    
    echo "Searching for 'shell' binary in the archive..."
    sleep 2
    SHELL_PATH=$(tar -tzf steamlink-package.tar.gz | grep -i '/shell$')

    if [[ -n "$SHELL_PATH" ]]; then
        echo "Extracting $SHELL_PATH from steamlink-package.tar.gz..."
        tar -xzf steamlink-package.tar.gz "$SHELL_PATH" -O > "$GAMEDIR/bin/shell.${DEVICE_ARCH}"
        chmod +x "$GAMEDIR/bin/shell.${DEVICE_ARCH}"
        extracted_files+=("$GAMEDIR/bin/shell.${DEVICE_ARCH}")
        
        echo "Searching for 'lib' folder in the archive..."
        sleep 2
        LIB_PATH=$(tar -tzf steamlink-package.tar.gz | grep -m1 -oE '^[^/]+/lib/')

        if [[ -n "$LIB_PATH" ]]; then
            echo "Extracting needed libraries from package."
            mkdir -p "$GAMEDIR/libs.${DEVICE_ARCH}"
            LIB_FILES=$(tar -tzf steamlink-package.tar.gz | grep "^${LIB_PATH}")

            # Extract and track individual files inside the lib folder
            for lib_file in $LIB_FILES; do
                tar -xzf steamlink-package.tar.gz -C "$GAMEDIR/libs.${DEVICE_ARCH}" --strip-components=2 "$lib_file"
                extracted_files+=("$GAMEDIR/libs.${DEVICE_ARCH}/$(basename "$lib_file")")
            done
            
            echo "Searching for 'Qt-x.xx.x' folder in the archive..."
            sleep 2
            QT_PATH=$(tar -tzf steamlink-package.tar.gz | grep -oE '^[^/]+/Qt-[0-9]+\.[0-9]+\.[0-9]+/' | head -n1)

            if [[ -n "$QT_PATH" ]]; then
                echo "Extracting $QT_PATH folder..."
                tar -xzf steamlink-package.tar.gz -C "$GAMEDIR/" --strip-components=1 $(tar -tzf steamlink-package.tar.gz | grep "^${QT_PATH}")
                extracted_files+=("$GAMEDIR/$QT_PATH")
                rm -rf steamlink-package.tar.gz
                echo "Patching process complete!"
            else
                echo "Qt not found in the archive!"
                rollback
            fi
        else
            echo "Could not find libraries!"
            rollback
        fi
    else
        echo "Could not find shell binary in the archive!"
        rollback
    fi
}

download_steamlink
