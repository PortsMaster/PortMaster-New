diff --git a/src/display.cpp b/src/display.cpp
index f4b04c80f32..51e2027ae9d 100644
--- a/src/display.cpp
+++ b/src/display.cpp
@@ -349,7 +349,8 @@ texture display::get_flag(const map_location& loc)
 			flag.update_last_draw_time();
 			const image::locator &image_flag = animate_map_ ?
 				flag.get_current_frame() : flag.get_first_frame();
-			return image::get_texture(image_flag, image::TOD_COLORED);
+			// Skip caching for the transformed flag texture
+			return image::get_texture(image_flag, image::TOD_COLORED, true);
 		}
 	}
 
@@ -1063,7 +1064,8 @@ std::vector<texture> display::get_fog_shroud_images(const map_location& loc, ima
 	std::vector<texture> res;
 
 	for(const std::string& name : names) {
-		if(texture tex = image::get_texture(name, image_type)) {
+		// Always skip caching for these images by passing true as the last parameter
+		if(texture tex = image::get_texture(name, image_type, true)) {
 			res.push_back(std::move(tex));
 		}
 	}
@@ -1197,6 +1199,10 @@ void display::get_terrain_images(const map_location& loc, const std::string& tim
 	if(const terrain_builder::imagelist* const terrains = builder_->get_terrain_at(loc, timeid, builder_terrain_type)) {
 		// Cache the offmap name. Since it is themeable it can change, so don't make it static.
 		const std::string off_map_name = "terrain/" + theme_.border().tile_image;
+		
+		// Reserve space in the vector to avoid reallocations
+		terrain_image_vector_.reserve(terrains->size());
+		
 		for(const auto& terrain : *terrains) {
 			const image::locator& image = animate_map_ ? terrain.get_current_frame() : terrain.get_first_frame();
 
@@ -1208,11 +1214,13 @@ void display::get_terrain_images(const map_location& loc, const std::string& tim
 			const bool off_map = (image.get_filename() == off_map_name
 				|| image.get_modifications().find("NO_TOD_SHIFT()") != std::string::npos);
 
+			// Always skip cache for transformed images by passing true to skip_cache
 			if(off_map) {
-				tex = image::get_texture(image, image::HEXED);
+				tex = image::get_texture(image, image::HEXED, true);
 			} else if(lt.empty()) {
-				tex = image::get_texture(image, image::HEXED);
+				tex = image::get_texture(image, image::HEXED, true);
 			} else {
+				// For lighted textures, get_lighted_texture now always skips cache
 				tex = image::get_lighted_texture(image, lt);
 			}
 
@@ -2719,10 +2727,10 @@ void display::draw_hex(const map_location& loc)
 			static const image::locator grid_bottom{game_config::images::grid_bottom};
 
 			drawing_buffer_add(LAYER_GRID_TOP, loc,
-				[tex = image::get_texture(grid_top, image::TOD_COLORED)](const rect& dest) { draw::blit(tex, dest); });
+				[tex = image::get_texture(grid_top, image::TOD_COLORED, true)](const rect& dest) { draw::blit(tex, dest); });
 
 			drawing_buffer_add(LAYER_GRID_BOTTOM, loc,
-				[tex = image::get_texture(grid_bottom, image::TOD_COLORED)](const rect& dest) { draw::blit(tex, dest); });
+				[tex = image::get_texture(grid_bottom, image::TOD_COLORED, true)](const rect& dest) { draw::blit(tex, dest); });
 		}
 	}
 
@@ -2791,8 +2799,9 @@ void display::draw_hex(const map_location& loc)
 			draw::blit(tod_hex_mask2, dest);
 		});
 	} else if(!tod_hex_mask.empty()) {
+		// Skip caching for tod mask textures
 		drawing_buffer_add(LAYER_TERRAIN_FG, loc,
-			[tex = image::get_texture(tod_hex_mask, image::HEXED)](const rect& dest) { draw::blit(tex, dest); });
+			[tex = image::get_texture(tod_hex_mask, image::HEXED, true)](const rect& dest) { draw::blit(tex, dest); });
 	}
 
 	// Paint arrows
@@ -2808,12 +2817,12 @@ void display::draw_hex(const map_location& loc)
 	if(is_shrouded) {
 		// We apply void also on off-map tiles to shroud the half-hexes too
 		drawing_buffer_add(LAYER_FOG_SHROUD, loc,
-			[tex = image::get_texture(get_variant(shroud_images_, loc), image::TOD_COLORED)](const rect& dest) {
+			[tex = image::get_texture(get_variant(shroud_images_, loc), image::TOD_COLORED, true)](const rect& dest) {
 				draw::blit(tex, dest);
 			});
 	} else if(fogged(loc)) {
 		drawing_buffer_add(LAYER_FOG_SHROUD, loc,
-			[tex = image::get_texture(get_variant(fog_images_, loc), image::TOD_COLORED)](const rect& dest) {
+			[tex = image::get_texture(get_variant(fog_images_, loc), image::TOD_COLORED, true)](const rect& dest) {
 				draw::blit(tex, dest);
 			});
 	}
@@ -2828,7 +2837,7 @@ void display::draw_hex(const map_location& loc)
 
 	if(debug_flag_set(DEBUG_FOREGROUND)) {
 		drawing_buffer_add(LAYER_UNIT_DEFAULT, loc,
-			[tex = image::get_texture(image::locator{"terrain/foreground.png"}, image::TOD_COLORED)](const rect& dest) {
+			[tex = image::get_texture(image::locator{"terrain/foreground.png"}, image::TOD_COLORED, true)](const rect& dest) {
 				draw::blit(tex, dest);
 			});
 	}
diff --git a/src/picture.cpp b/src/picture.cpp
index a7857cbd804..25b4fb5b853 100644
--- a/src/picture.cpp
+++ b/src/picture.cpp
@@ -622,7 +622,7 @@ void set_color_adjustment(int r, int g, int b)
 
 static surface get_hexed(const locator& i_locator, bool skip_cache = false)
 {
-	surface image(get_surface(i_locator, UNSCALED, skip_cache));
+	surface image(get_surface(i_locator, image::UNSCALED, skip_cache));
 	surface mask(get_hexmask());
 	// Ensure the image is the correct size by cropping and/or centering.
 	// TODO: this should probably be a function of sdl/utils
@@ -661,23 +661,23 @@ static surface get_hexed(const locator& i_locator, bool skip_cache = false)
 
 static surface get_tod_colored(const locator& i_locator, bool skip_cache = false)
 {
-	surface img = get_surface(i_locator, HEXED, skip_cache);
+	surface img = get_surface(i_locator, image::HEXED, skip_cache);
 	return adjust_surface_color(img, red_adjust, green_adjust, blue_adjust);
 }
 
 /** translate type to a simpler one when possible */
 static TYPE simplify_type(const image::locator& i_locator, TYPE type)
 {
-	if(type == TOD_COLORED) {
+	if(type == image::TOD_COLORED) {
 		if(red_adjust == 0 && green_adjust == 0 && blue_adjust == 0) {
-			type = HEXED;
+			type = image::HEXED;
 		}
 	}
 
-	if(type == HEXED) {
+	if(type == image::HEXED) {
 		// check if the image is already hex-cut by the location system
 		if(i_locator.get_loc().valid()) {
-			type = UNSCALED;
+			type = image::UNSCALED;
 		}
 	}
 
@@ -697,6 +697,11 @@ surface get_surface(
 
 	type = simplify_type(i_locator, type);
 
+	// Always skip caching for anything except UNSCALED type
+	if (type != image::UNSCALED) {
+		skip_cache = true;
+	}
+
 	// select associated cache
 	if(type >= NUM_TYPES) {
 		WRN_IMG << "get_surface called with unknown image type";
@@ -705,7 +710,8 @@ surface get_surface(
 	surface_cache& imap = surfaces_[type];
 
 	// return the image if already cached
-	if(auto cached_item = i_locator.copy_from_cache(imap)) {
+	std::optional<surface> cached_item = i_locator.copy_from_cache(imap);
+	if(!skip_cache && cached_item) {
 		return *cached_item;
 	}
 
@@ -713,14 +719,14 @@ surface get_surface(
 
 	// not cached, generate it
 	switch(type) {
-	case UNSCALED:
+	case image::UNSCALED:
 		// If type is unscaled, directly load the image from the disk.
 		res = load_from_disk(i_locator);
 		break;
-	case TOD_COLORED:
+	case image::TOD_COLORED:
 		res = get_tod_colored(i_locator, skip_cache);
 		break;
-	case HEXED:
+	case image::HEXED:
 		res = get_hexed(i_locator, skip_cache);
 		break;
 	default:
@@ -754,32 +760,13 @@ surface get_lighted_image(const image::locator& i_locator, const light_string& l
 		return res;
 	}
 
-	// select associated cache
-	lit_surface_cache* imap = &lit_surfaces_;
-
-	// if no light variants yet, need to add an empty map
-	if(!i_locator.in_cache(*imap)) {
-		i_locator.add_to_cache(*imap, lit_surface_variants());
-	}
-
-	// need access to add it if not found
-	{ // enclose reference pointing to data stored in a changing vector
-		const lit_surface_variants& lvar = i_locator.locate_in_cache(*imap);
-		auto lvi = lvar.find(ls);
-		if(lvi != lvar.end()) {
-			return lvi->second;
-		}
-	}
-
-	DBG_IMG << "lit surface cache miss: " << i_locator;
+	// Always skip the cache for lighted images
+	DBG_IMG << "lit surface generated (no cache): " << i_locator;
 
-	// not cached yet, generate it
-	res = get_surface(i_locator, HEXED);
+	// Get the base image (which may be cached if UNSCALED)
+	res = get_surface(i_locator, image::HEXED);
 	res = apply_light(res, ls);
 
-	// record the lighted surface in the corresponding variants cache
-	i_locator.access_in_cache(*imap)[ls] = res;
-
 	return res;
 }
 
@@ -791,37 +778,19 @@ texture get_lighted_texture(
 		return texture();
 	}
 
-	// select associated cache
-	lit_texture_cache* imap = &lit_textures_;
-
-	// if no light variants yet, need to add an empty map
-	if(!i_locator.in_cache(*imap)) {
-		i_locator.add_to_cache(*imap, lit_texture_variants());
-	}
-
-	// need access to add it if not found
-	{ // enclose reference pointing to data stored in a changing vector
-		const lit_texture_variants& lvar = i_locator.locate_in_cache(*imap);
-		auto lvi = lvar.find(ls);
-		if(lvi != lvar.end()) {
-			return lvi->second;
-		}
-	}
-
-	DBG_IMG << "lit texture cache miss: " << i_locator;
-
-	// not cached yet, generate it
-	texture tex(get_lighted_image(i_locator, ls));
+	// Always generate on demand, don't use cache
+	DBG_IMG << "lit texture generated (no cache): " << i_locator;
 
-	// record the lighted texture in the corresponding variants cache
-	i_locator.access_in_cache(*imap)[ls] = tex;
-
-	return tex;
+	// Simply get the lighted image and convert to texture
+	return texture(get_lighted_image(i_locator, ls));
+}
 }
 
+namespace image {
+
 surface get_hexmask()
 {
-	static const image::locator terrain_mask(game_config::images::terrain_mask);
+	static const locator terrain_mask(game_config::images::terrain_mask);
 	return get_surface(terrain_mask, UNSCALED);
 }
 
@@ -877,9 +846,9 @@ bool is_empty_hex(const locator& i_locator)
 	return i_locator.locate_in_cache(is_empty_hex_);
 }
 
-bool exists(const image::locator& i_locator)
+bool exists(const locator& i_locator)
 {
-	typedef image::locator loc;
+	typedef locator loc;
 	loc::type type = i_locator.get_type();
 	if(type != loc::FILE && type != loc::SUB_FILE) {
 		return false;
@@ -983,13 +952,14 @@ save_result save_image(const surface& surf, const std::string& filename)
  * get_surface.
  */
 
-texture get_texture(const image::locator& i_locator, TYPE type, bool skip_cache)
+texture get_texture(const locator& i_locator, TYPE type, bool skip_cache)
 {
 	return get_texture(i_locator, scale_quality::nearest, type, skip_cache);
 }
 
+
 /** Returns a texture for the corresponding image. */
-texture get_texture(const image::locator& i_locator, scale_quality quality, TYPE type, bool skip_cache)
+texture get_texture(const locator& i_locator, scale_quality quality, TYPE type, bool skip_cache)
 {
 	texture res;
 
@@ -999,6 +969,11 @@ texture get_texture(const image::locator& i_locator, scale_quality quality, TYPE
 
 	type = simplify_type(i_locator, type);
 
+	// Always skip caching for transformed textures (non-UNSCALED)
+	if (type != image::UNSCALED) {
+		skip_cache = true;
+	}
+
 	//
 	// Select the appropriate cache. We don't need caches for every single image types,
 	// since some types can be handled by render-time operations.
@@ -1006,10 +981,10 @@ texture get_texture(const image::locator& i_locator, scale_quality quality, TYPE
 	texture_cache* cache = nullptr;
 
 	switch(type) {
-	case HEXED:
+	case image::HEXED:
 		cache = &textures_hexed_[quality];
 		break;
-	case TOD_COLORED:
+	case image::TOD_COLORED:
 		cache = &texture_tod_colored_[quality];
 		break;
 	default:
@@ -1019,7 +994,8 @@ texture get_texture(const image::locator& i_locator, scale_quality quality, TYPE
 	//
 	// Now attempt to find a cached texture. If found, return it.
 	//
-	if(auto cached_item = i_locator.copy_from_cache(*cache)) {
+	std::optional<texture> cached_item = i_locator.copy_from_cache(*cache);
+	if(!skip_cache && cached_item) {
 		return *cached_item;
 	}
 
@@ -1050,4 +1026,4 @@ texture get_texture(const image::locator& i_locator, scale_quality quality, TYPE
 	return res;
 }
 
-} // end namespace image
+} // namespace image
