#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="dark_deity.port"
export PATCHZIP="darkdeity-steam.zip"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

check_data() {
    echo "Checking game data..."
    if [ -e "$DATADIR/steam"* ]; then
        # Steam
        export PATCHZIP="steam/darkdeity-steam.zip"
        export PATCH="darkdeity-steam.xdelta"
        rm -rf $DATADIR/*.dll $DATADIR/.gitkeep $DATADIR/*.exe
    elif [ -f "$DATADIR/gog.ico" ]; then
        # GOG
        export PATCHZIP="gog/darkdeity-gog.zip"
        export PATCH="darkdeity-gog.xdelta"
        rm -rf $DATADIR/*.ico $DATADIR/goggame* $DATADIR/*.lnk \
               $DATADIR/unins* $DATADIR/webcache.zip $DATADIR/*.dll
               $DATADIR/.gitkeep $DATADIR/*.exe
    else
        echo "Unable to determine assets origin!"
        exit 1
    fi
}

unzip_patch() {
    if [ -f "$TOOLDIR/patches/$PATCHZIP.001" ]; then
        echo "Unzipping the patch file..."
        $TOOLDIR/7za x $TOOLDIR/patches/$PATCHZIP.001 -o$TOOLDIR/patches
        if [ $? -eq 0 ]; then
            echo "Patch file successfully extracted."
            rm $TOOLDIR/patches/$PATCHZIP.*
        else
            echo "Failed to extract multi-part archive."
            exit 1
        fi
    elif [ ! -f "$TOOLDIR/patches/darkdeity.xdelta" ]; then
        echo "Patch archive not found!"
        exit 1
    fi
}
apply_xdelta() {
    # Check if both data.win and darkdeity.xdelta files exist before applying the patch
    if [ -f "$DATADIR/data.win" ]; then
        if [ -f "$TOOLDIR/patches/$PATCH" ]; then
            output=$(xdelta3 -d -s "$DATADIR/data.win" -f "$TOOLDIR/patches/$PATCH" "$DATADIR/game.droid" 2>&1)
            if [ $? -eq 0 ]; then
                echo "Patch applied successfully"
                echo "$output"
                rm -rf "$DATADIR/data.win" "$TOOLDIR/patches"/*
            else
                echo "Failed to apply patch"
                echo "$output"
                exit 1
            fi
        else
            echo "No .xdelta file found; skipping patching."
        fi
    else
        echo "No data.win file found to patch!"
    fi
}

compress_audio() {
    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
    fi
}

zip_archive() {
        mv $DATADIR/splash.png .
        zip -r -0 $DATAFILE ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf ./assets
}

process_game() { 
    mkdir -p saves
    check_data
    sleep 1
    
    # Text data must be moved to saves directory or game will crash
    [ -d "$DATADIR/Bonds" ] && mv "$DATADIR/Bonds" ./saves/Bonds
    [ -d "$DATADIR/Scenes" ] && mv "$DATADIR/Scenes" ./saves/Scenes
    [ -d "$DATADIR/Stories" ] && mv "$DATADIR/Stories" ./saves/Stories
    
    sleep 1
    echo "Unpacking xdelta patch..."
    unzip_patch
    sleep 1
    echo "Applying xdelta patch..."
    apply_xdelta
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game