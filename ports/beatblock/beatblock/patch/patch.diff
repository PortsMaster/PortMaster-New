Binary files beatblock orig/Beatblock and beatblock/Beatblock differ
diff -ruN "beatblock orig/lib/helpers.lua" beatblock/lib/helpers.lua
--- "beatblock orig/lib/helpers.lua"	2025-01-22 22:23:16.000000000 +0100
+++ beatblock/lib/helpers.lua	2025-03-24 20:55:17.341762100 +0100
@@ -322,7 +322,7 @@
   if bcol == 'black' then
     love.graphics.setColor({0,0,0,1})
   else
-    love.graphics.setShader(shaders.whiteout)
+    --love.graphics.setShader(--shaders.whiteout)
   end
   
   for x=-1,1 do
diff -ruN "beatblock orig/lib/mouse.lua" beatblock/lib/mouse.lua
--- "beatblock orig/lib/mouse.lua"	2025-01-22 22:23:16.000000000 +0100
+++ beatblock/lib/mouse.lua	2025-03-24 20:55:17.419764400 +0100
@@ -113,8 +113,8 @@
 	love.graphics.setCanvas()
 	
 	if savedata.options.game.cursorMode == 'invert' then
-		love.graphics.setShader(shaders.cursor)
-		shaders.cursor:send('shuvCanvas',shuv.canvasShaded)
+		--love.graphics.setShader(--shaders.cursor)
+		----shaders.cursor:send('shuvCanvas',shuv.canvasShaded)
 	end
 	love.graphics.draw(self.mouseCanvas,shuv.xoffset,shuv.yoffset,0,shuv.scale / shuv.internal_scale,shuv.scale / shuv.internal_scale)
 	
diff -ruN "beatblock orig/lib/shuv.lua" beatblock/lib/shuv.lua
--- "beatblock orig/lib/shuv.lua"	2025-03-24 22:23:02.593744500 +0100
+++ beatblock/lib/shuv.lua	2025-03-24 20:55:17.435770600 +0100
@@ -201,11 +201,11 @@
 		
 		table.insert(newpal,coltable)
 	end
-  shaders.palshader:send('newcolors',unpack(newpal))
+  ----shaders.palshader:send('newcolors',unpack(newpal))
 	if shuv.showBadColors then
-		shaders.palshader:send('showBadColors', 1)
+	--	--shaders.palshader:send('showBadColors', 1)
 	else
-		shaders.palshader:send('showBadColors', 0)
+	--	--shaders.palshader:send('showBadColors', 0)
 	end
 end
 
@@ -236,7 +236,7 @@
 	shuv.updatepal()
 	
 	if shuv.usePalette then
-		love.graphics.setShader(shaders.palshader)
+	--	love.graphics.setShader(--shaders.palshader)
 	else
 		love.graphics.setShader()
 	end
diff -ruN "beatblock orig/main.lua" beatblock/main.lua
--- "beatblock orig/main.lua"	2025-02-22 08:11:18.000000000 +0100
+++ beatblock/main.lua	2025-03-24 22:44:35.223910200 +0100
@@ -2,7 +2,7 @@
 	dofile = function(fname) return love.filesystem.load(fname)() end
 
 	dt = 1
-	version = '0.5.0 (Demo)' -- Current Game Version
+	version = '0.4.1 (Demo) PortMaster Edition' -- Current Game Version
 	freeze = 0
 
 	-- set rescaling filter
@@ -313,16 +313,8 @@
 	quads = require('preload.quads')
 
 
-	-- load shaderss
-
-	-- before loading shaders, check if the game can even run
-	if not love.graphics.getSupported().glsl3 then
-		love.window.showMessageBox('Beatblock could not be launched.',
-			'The game could not be launched because your system does not support OpenGL 3.\nYou may be able to resolve this by upgrading your graphics drivers, or by running the game on a more modern system.',
-			'error')
-		love.event.quit()
-	end
-	shaders = require('preload.shaders')
+	-- load --shaderss
+	----shaders = require('preload.--shaders')
 
 	--colors
 	colors = require('preload.colors')
@@ -366,13 +358,13 @@
 		if dither then
 			setDither(dither)
 		end
-		shaders.outline:send('gameWidth', project.res.x)
-		shaders.outline:send('gameHeight', project.res.y)
-		shaders.outline:send('c', col)
-		love.graphics.setShader(shaders.outline)
+		----shaders.outline:send('gameWidth', project.res.x)
+		----shaders.outline:send('gameHeight', project.res.y)
+		----shaders.outline:send('c', col)
+		-- love.graphics.setShader(--shaders.outline)
 		color()
 		love.graphics.draw(Outline.usingCanvas[#Outline.usingCanvas])
-		love.graphics.setShader()
+		--love.graphics.setShader()
 		if dither then
 			setDither()
 		end
@@ -417,10 +409,10 @@
 			if dither then
 				setDither(dither)
 			end
-			shaders.outline:send('gameWidth', project.res.x)
-			shaders.outline:send('gameHeight', project.res.y)
-			shaders.outline:send('c', col)
-			love.graphics.setShader(shaders.outline)
+			--shaders.outline:send('gameWidth', project.res.x)
+			--shaders.outline:send('gameHeight', project.res.y)
+			--shaders.outline:send('c', col)
+			love.graphics.setShader(--shaders.outline)
 			color()
 			love.graphics.draw(usingCanvas)
 			love.graphics.setShader()
@@ -446,11 +438,11 @@
 		color()
 		love.graphics.setCanvas({love.graphics.getCanvas(),stencil = true})
 		love.graphics.clear(false,true,false)
-		love.graphics.setShader(shaders.texturestencil)
+		--love.graphics.setShader(--shaders.texturestencil)
 		love.graphics.stencil(function()
 			love.graphics.draw(sprites.dither[dither])
 		end, 'replace', 1, true)
-		love.graphics.setShader()
+		--love.graphics.setShader()
 		love.graphics.setStencilTest('equal', 1)
 		
 	end
diff -ruN "beatblock orig/obj/Deco.lua" beatblock/obj/Deco.lua
--- "beatblock orig/obj/Deco.lua"	2025-02-22 22:05:18.000000000 +0100
+++ beatblock/obj/Deco.lua	2025-03-24 20:57:36.662903200 +0100
@@ -67,7 +67,7 @@
 	if not skipSetColor then
 		if self.recolor ~= -1 then
 			color(self.recolor)
-			love.graphics.setShader(shaders.recolor)
+			--love.graphics.setShader(shaders.recolor)
 		else
 			color()
 		end
diff -ruN "beatblock orig/obj/GameManager.lua" beatblock/obj/GameManager.lua
--- "beatblock orig/obj/GameManager.lua"	2025-02-22 22:05:18.000000000 +0100
+++ beatblock/obj/GameManager.lua	2025-03-24 20:56:36.708508300 +0100
@@ -933,14 +933,14 @@
 			end
 			local correctedBgNoise = cs.vfx.bgNoise^(1 / ((1/60)/timerDelta) )
 			--iterations = ((1/60)/love.timer.getDelta()) OR (love.timer.getFPS() / 60), not sure which will work better
-			shaders.bgnoise:send('time', cs.vfx.time)
+			----shaders.bgnoise:send('time', cs.vfx.time)
 			if cs.vfx.ignoreNoiseCorrection then
 				correctedBgNoise = cs.vfx.bgNoise
 			end
-			shaders.bgnoise:send('chance',correctedBgNoise)
-			love.graphics.setShader(shaders.bgnoise)
+			----shaders.bgnoise:send('chance',correctedBgNoise)
+--love.graphics.setShader(--shaders.bgnoise)
 		else --draw noise as solid in decreased vfx mode
-			love.graphics.setShader()
+			--love.graphics.setShader()
 		end
 		color(cs.vfx.bgNoiseColor)
 		love.graphics.draw(sprites.noisetexture)
@@ -951,9 +951,9 @@
   if cs.bg then love.graphics.draw(cs.bg) end
 	
 	if cs.drawVideoBG then
-		love.graphics.setShader(shaders.videoshader)
+		--love.graphics.setShader(--shaders.videoshader)
 		love.graphics.draw(cs.videoBG)
-		love.graphics.setShader()
+		--love.graphics.setShader()
 	end
 
   color()
@@ -1171,27 +1171,27 @@
 		cs.vfx.vwaves.flipMult = 1
 	end
 	
-	shaders.ontop:send('time', cs.vfx.time)
+	--shaders.ontop:send('time', cs.vfx.time)
 	
-	shaders.ontop:send('hglitch_strength', cs.vfx.hglitch.strength)
-	shaders.ontop:send('hglitch_resolution', cs.vfx.hglitch.resolution)
+	--shaders.ontop:send('hglitch_strength', cs.vfx.hglitch.strength)
+	--shaders.ontop:send('hglitch_resolution', cs.vfx.hglitch.resolution)
 	
-	shaders.ontop:send('vglitch_strength', cs.vfx.vglitch.strength)
-	shaders.ontop:send('vglitch_resolution', cs.vfx.vglitch.resolution)
+	--shaders.ontop:send('vglitch_strength', cs.vfx.vglitch.strength)
+	--shaders.ontop:send('vglitch_resolution', cs.vfx.vglitch.resolution)
 	
-	shaders.ontop:send('hwaves_strength', cs.vfx.hwaves.strength*cs.vfx.hwaves.flipMult)
-	shaders.ontop:send('hwaves_period', cs.vfx.hwaves.period)
-	shaders.ontop:send('hwaves_offset', cs.vfx.hwaves.offset)
+	--shaders.ontop:send('hwaves_strength', cs.vfx.hwaves.strength*cs.vfx.hwaves.flipMult)
+	--shaders.ontop:send('hwaves_period', cs.vfx.hwaves.period)
+	--shaders.ontop:send('hwaves_offset', cs.vfx.hwaves.offset)
 	
-	shaders.ontop:send('vwaves_strength', cs.vfx.vwaves.strength*cs.vfx.vwaves.flipMult)
-	shaders.ontop:send('vwaves_period', cs.vfx.vwaves.period)
-	shaders.ontop:send('vwaves_offset', cs.vfx.vwaves.offset)
+	--shaders.ontop:send('vwaves_strength', cs.vfx.vwaves.strength*cs.vfx.vwaves.flipMult)
+	--shaders.ontop:send('vwaves_period', cs.vfx.vwaves.period)
+	--shaders.ontop:send('vwaves_offset', cs.vfx.vwaves.offset)
 	
-	shaders.ontop:send('pixelate', cs.vfx.pixelate)
-	shaders.ontop:send('effectCanvas', cs.vfx.effectCanvas)
+	--shaders.ontop:send('pixelate', cs.vfx.pixelate)
+	--shaders.ontop:send('effectCanvas', cs.vfx.effectCanvas)
 	
 	if savedata.options.accessibility.vfx == 'full' then 
-		love.graphics.setShader(shaders.ontop)
+		--love.graphics.setShader(--shaders.ontop)
 	else --no on top effects in decreased vfx mode
 		love.graphics.setShader()
 	end
diff -ruN "beatblock orig/obj/Player.lua" beatblock/obj/Player.lua
--- "beatblock orig/obj/Player.lua"	2025-02-19 09:56:08.000000000 +0100
+++ beatblock/obj/Player.lua	2025-03-24 20:56:41.549851200 +0100
@@ -385,7 +385,7 @@
 			-- draw the eyes
 			if self.faceColor ~= -1 then
 				color(self.faceColor)
-				love.graphics.setShader(shaders.recolor)
+				--love.graphics.setShader(shaders.recolor)
 			else
 				color()
 			end
diff -ruN "beatblock orig/states/SongSelect.lua" beatblock/states/SongSelect.lua
--- "beatblock orig/states/SongSelect.lua"	2025-02-22 22:05:18.000000000 +0100
+++ beatblock/states/SongSelect.lua	2025-03-24 20:56:39.801535700 +0100
@@ -836,9 +836,9 @@
 	local noiseChance = (0.7)^(1 / ((1/60)/love.timer.getDelta()) )
 	
 	if self.bgChangeTimer > 0 then
-		shaders.bgnoise:send('time', self.bgNoiseTime)
-		shaders.bgnoise:send('chance',noiseChance)
-		love.graphics.setShader(shaders.bgnoise)
+		--shaders.bgnoise:send('time', self.bgNoiseTime)
+		--shaders.bgnoise:send('chance',noiseChance)
+		--love.graphics.setShader(shaders.bgnoise)
 	end
 	
 	love.graphics.draw(bgImage,x,project.res.cy,0,1,1,math.floor(bgImage:getWidth()/2),math.floor(bgImage:getHeight()/2))
