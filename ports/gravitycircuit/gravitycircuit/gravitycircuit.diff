diff -ru gamedata/BUILD_INFORMATION.lua gamedata-patched/BUILD_INFORMATION.lua
--- gamedata/BUILD_INFORMATION.lua	2024-03-12 14:00:20.000000000 +0000
+++ gamedata-patched/BUILD_INFORMATION.lua	2024-04-20 17:46:49.524905979 +0100
@@ -1 +1 @@
-return { BUILD_DATE='2024-03-12', REGION_CODE='WORLDWIDE', USE_PLATFORM='STEAM', ENV_MODE='RELEASE'  } 
+return { BUILD_DATE='2024-03-12', REGION_CODE='WORLDWIDE', ENV_MODE='RELEASE' } -- , USE_PLATFORM='STEAM'
diff -ru gamedata/lua/gfx/ShaderSystem.lua gamedata-patched/lua/gfx/ShaderSystem.lua
--- gamedata/lua/gfx/ShaderSystem.lua	2023-04-19 03:35:06.000000000 +0100
+++ gamedata-patched/lua/gfx/ShaderSystem.lua	2024-04-20 17:46:49.548239844 +0100
@@ -1,4 +1,6 @@
 -- [ShaderSystem]
+print("love.graphics.getRendererInfo():")
+print(love.graphics.getRendererInfo())
 local _SHADER = register ("ShaderManager")
 local _COLOR_SWAP_SHADER = nil
 local _COLOR_HAZE_SHADER = nil
@@ -25,6 +27,7 @@
 _SHIFT_INTERVALS[0] = 0
 
 function _SHADER:initialize ( path )
+  
   self.path = path or "lua/gfx/shaders/"
   self.list = {}
   self._loading     = true
@@ -42,6 +45,7 @@
 function _SHADER.onFinish ( self, code )
   local ok, chunk
   for k,v in pairs (code) do
+    print("compiling shader: " .. tostring(k))
     self.list[k] = {code=v,common= love.graphics.newShader ( v )}
   end
   self._loading = false
@@ -73,7 +77,7 @@
 end
 
 function _SHADER:get ( shader, new )
-  --assert ( self.list[shader] ~= nil, "Attempted to load an unsupported shader! " .. shader )
+  -- assert ( self.list[shader] ~= nil, "Attempted to load an unsupported shader! " .. shader ) --TODO: remove on release
   return not new and self.list[shader].common or love.graphics.newShader ( self.list[shader].code )
 end
 
@@ -141,7 +145,7 @@
     activeColor[pickNum(5,highestColor)],   
     activeColor[pickNum(6,highestColor)]   
   )
-  _COLOR_SWAP_SHADER:send ( "shift", shift > 0 and math.min(_SHIFT_INTERVALS[shift%18+1], max) or 0 )
+  _COLOR_SWAP_SHADER:send ( "shift", shift > 0 and math.floor(math.min(_SHIFT_INTERVALS[shift%18+1], max)) or 0 )
   _COLOR_SWAP_SHADER:send ( "transparency", alpha )
 end
 
@@ -179,7 +183,7 @@
     activeColor[pickNum(5,highestColor)],   
     activeColor[pickNum(6,highestColor)]   
   )
-  _COLOR_HAZE_SHADER:send ( "shift", shift > 0 and math.min(_SHIFT_INTERVALS[shift%18+1], max) or 0 )
+  _COLOR_HAZE_SHADER:send ( "shift", shift > 0 and math.floor(math.min(_SHIFT_INTERVALS[shift%18+1], max)) or 0 )
   _COLOR_HAZE_SHADER:send ( "transparency", alpha )
 
   love.graphics.setShader ( _COLOR_HAZE_SHADER )
@@ -197,7 +201,7 @@
   shift = shift or 0
   _COLOR_SWAP_SHADER:send ( "baseColors",   baseColor[1],   baseColor[2],   baseColor[3],   baseColor[4],   baseColor[5],   baseColor[6]   )
   _COLOR_SWAP_SHADER:send ( "activeColors", activeColor[1], activeColor[2], activeColor[3], activeColor[4], activeColor[5], activeColor[6] )
-  _COLOR_SWAP_SHADER:send ( "shift", shift > 0 and math.min(_SHIFT_INTERVALS[shift%18+1], max or 5) or 0 )
+  _COLOR_SWAP_SHADER:send ( "shift", shift > 0 and math.floor(math.min(_SHIFT_INTERVALS[shift%18+1], max or 5)) or 0 )
   _COLOR_SWAP_SHADER:send ( "transparency", 1.0 )
 end
 
diff -ru gamedata/lua/gfx/shaders/addBlackOutlinesShader.lua gamedata-patched/lua/gfx/shaders/addBlackOutlinesShader.lua
--- gamedata/lua/gfx/shaders/addBlackOutlinesShader.lua	2019-03-13 23:40:18.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/addBlackOutlinesShader.lua	2024-04-20 17:46:49.528239388 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 vec4 resultCol;
 extern vec2 stepSize;
 extern vec3 color;
@@ -7,13 +8,13 @@
 vec4 effect( vec4 col, Image texture, vec2 texturePos, vec2 screenPos )
 {
     // get color of pixels:
-    alpha += texture2D( texture, texturePos + vec2( stepSize.x, 0.0f ) ).a;
-    alpha += texture2D( texture, texturePos + vec2( -stepSize.x, 0.0f ) ).a;
-    alpha += texture2D( texture, texturePos + vec2( 0.0f, stepSize.y ) ).a;
-    alpha += texture2D( texture, texturePos + vec2( 0.0f, -stepSize.y ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( stepSize.x, 0.0 ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( -stepSize.x, 0.0 ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( 0.0, stepSize.y ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( 0.0, -stepSize.y ) ).a;
 
     // calculate resulting color
-    resultCol = vec4( color.r, color.g, color.b, 1.0f*alpha );
+    resultCol = vec4( color.r, color.g, color.b, 1.0*alpha );
     // return color for current pixel
     return resultCol;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/bestiaryPreviewShader.lua gamedata-patched/lua/gfx/shaders/bestiaryPreviewShader.lua
--- gamedata/lua/gfx/shaders/bestiaryPreviewShader.lua	2022-02-09 20:44:30.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/bestiaryPreviewShader.lua	2024-04-20 17:46:49.528239388 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 vec4 resultCol;
 extern vec2 stepSize;
 extern vec3 color;
@@ -7,13 +8,13 @@
 vec4 effect( vec4 col, Image texture, vec2 texturePos, vec2 screenPos )
 {
     // get color of pixels:
-    alpha += texture2D( texture, texturePos + vec2( stepSize.x, 0.0f ) ).a;
-    alpha += texture2D( texture, texturePos + vec2( -stepSize.x, 0.0f ) ).a;
-    alpha += texture2D( texture, texturePos + vec2( 0.0f, stepSize.y ) ).a;
-    alpha += texture2D( texture, texturePos + vec2( 0.0f, -stepSize.y ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( stepSize.x, 0.0 ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( -stepSize.x, 0.0 ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( 0.0, stepSize.y ) ).a;
+    alpha += texture2D( texture, texturePos + vec2( 0.0, -stepSize.y ) ).a;
 
     // calculate resulting color
-    resultCol = vec4( color.r, color.g, color.b, 1.0f*alpha );
+    resultCol = vec4( color.r, color.g, color.b, 1.0*alpha );
     // return color for current pixel
     return resultCol;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/blackAndWhiteShader.lua gamedata-patched/lua/gfx/shaders/blackAndWhiteShader.lua
--- gamedata/lua/gfx/shaders/blackAndWhiteShader.lua	2019-03-13 23:40:06.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/blackAndWhiteShader.lua	2024-04-20 17:46:49.528239388 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 // Black and white shader
 vec4 effect( vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords ){
    vec4 pixel = Texel(texture, texture_coords );//This is the current pixel color
diff -ru gamedata/lua/gfx/shaders/damageShader.lua gamedata-patched/lua/gfx/shaders/damageShader.lua
--- gamedata/lua/gfx/shaders/damageShader.lua	2019-03-13 23:41:02.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/damageShader.lua	2024-04-20 17:46:49.531572797 +0100
@@ -1,8 +1,9 @@
-extern float WhiteFactor;
-
-vec4 effect(vec4 vcolor, Image tex, vec2 texcoord, vec2 pixcoord)
-{
-    vec4 outputcolor = Texel(tex, texcoord) * vcolor;
-    outputcolor.rgb += vec3(WhiteFactor);
-    return outputcolor;
+#pragma language glsl1
+extern float WhiteFactor;
+
+vec4 effect(vec4 vcolor, Image tex, vec2 texcoord, vec2 pixcoord)
+{
+    vec4 outputcolor = Texel(tex, texcoord) * vcolor;
+    outputcolor.rgb += vec3(WhiteFactor);
+    return outputcolor;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/damageShaderIgnoreOutlines.lua gamedata-patched/lua/gfx/shaders/damageShaderIgnoreOutlines.lua
--- gamedata/lua/gfx/shaders/damageShaderIgnoreOutlines.lua	2019-03-13 23:39:48.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/damageShaderIgnoreOutlines.lua	2024-04-20 17:46:49.528239388 +0100
@@ -1,14 +1,15 @@
-extern float whiteFactor;
-extern vec2 stepSize;
-
-vec4 effect(vec4 vcolor, Image tex, vec2 texcoord, vec2 pixcoord)
-{
-    vec4 outputcolor = Texel(tex, texcoord) * vcolor;
-    number alpha = 4*Texel( tex, texcoord ).a;
-    alpha -= Texel( tex, texcoord + vec2( stepSize.x,   0.0f        ) ).a;
-    alpha -= Texel( tex, texcoord + vec2( -stepSize.x,  0.0f        ) ).a;
-    alpha -= Texel( tex, texcoord + vec2( 0.0f,         stepSize.y  ) ).a;
-    alpha -= Texel( tex, texcoord + vec2( 0.0f,         -stepSize.y ) ).a;
-    outputcolor.rgb += vec3(max(0,whiteFactor-alpha));
-    return outputcolor;
-}
+#pragma language glsl1
+extern float whiteFactor;
+extern vec2 stepSize;
+
+vec4 effect(vec4 vcolor, Image tex, vec2 texcoord, vec2 pixcoord)
+{
+    vec4 outputcolor = Texel(tex, texcoord) * vcolor;
+    number alpha = 4.0*Texel( tex, texcoord ).a;
+    alpha -= Texel( tex, texcoord + vec2( stepSize.x,   0.0        ) ).a;
+    alpha -= Texel( tex, texcoord + vec2( -stepSize.x,  0.0        ) ).a;
+    alpha -= Texel( tex, texcoord + vec2( 0.0,         stepSize.y  ) ).a;
+    alpha -= Texel( tex, texcoord + vec2( 0.0,         -stepSize.y ) ).a;
+    outputcolor.rgb += vec3(max(0.0,whiteFactor-alpha));
+    return outputcolor;
+}
diff -ru gamedata/lua/gfx/shaders/heatHazeShader.lua gamedata-patched/lua/gfx/shaders/heatHazeShader.lua
--- gamedata/lua/gfx/shaders/heatHazeShader.lua	2023-12-07 04:48:42.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/heatHazeShader.lua	2024-04-20 17:46:49.531572797 +0100
@@ -1,11 +1,13 @@
+#pragma language glsl1
 extern float    time;           // passage of time
 extern float    sinTime;
-extern float    cellDensity = 25;
+extern float    cellDensity;
+//extern float    cellDensity = 25;
 
 float strength      = 0.005;
 float speed         = 0.125;
-float angleOffset   = 30; 
-float angleSpeed    = 10;
+float angleOffset   = 30.0; 
+float angleSpeed    = 10.0;
 
 /////////////
 // VORONOI //
diff -ru gamedata/lua/gfx/shaders/heatHazeShaderPaletteSwapper6.lua gamedata-patched/lua/gfx/shaders/heatHazeShaderPaletteSwapper6.lua
--- gamedata/lua/gfx/shaders/heatHazeShaderPaletteSwapper6.lua	2024-02-16 01:42:32.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/heatHazeShaderPaletteSwapper6.lua	2024-04-20 17:46:49.534906207 +0100
@@ -1,11 +1,13 @@
+#pragma language glsl1
 extern float    time;           // passage of time
 extern float    sinTime;
-extern float    cellDensity = 25;
+extern float    cellDensity;
+//extern float    cellDensity = 25; 
 
 float strength      = 0.007;
 float speed         = 0.125;
-float angleOffset   = 90; 
-float angleSpeed    = 10;
+float angleOffset   = 90.0; 
+float angleSpeed    = 10.0;
 
 /////////////
 // VORONOI //
@@ -104,14 +106,14 @@
 
     vec4 raw   = Texel ( texture, coord );
     vec3 color = vec3(0,0,0);  
-    number r = floor(raw.r * 255.0f + 0.025f);
-
-    color     += when_eq ( r, 250) * color5;
-    color     += when_eq ( r, 200) * color4;
-    color     += when_eq ( r, 150) * color3;
-    color     += when_eq ( r, 100) * color2;
-    color     += when_eq ( r,  50) * color1;
-    color     += when_eq ( r,   0) * outline;
+    number r = floor(raw.r * 255.0 + 0.025);
+    // ? epsilon instead?
+    color     += when_eq ( r, 250.0) * color5;
+    color     += when_eq ( r, 200.0) * color4;
+    color     += when_eq ( r, 150.0) * color3;
+    color     += when_eq ( r, 100.0) * color2;
+    color     += when_eq ( r,  50.0) * color1;
+    color     += when_eq ( r,   0.0) * outline;
 
     return vec4(color.r, color.g, color.b, raw.a);
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/heatHazeShaderWithPaletteDeluxe.lua gamedata-patched/lua/gfx/shaders/heatHazeShaderWithPaletteDeluxe.lua
--- gamedata/lua/gfx/shaders/heatHazeShaderWithPaletteDeluxe.lua	2022-12-02 23:17:22.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/heatHazeShaderWithPaletteDeluxe.lua	2024-04-20 17:46:49.534906207 +0100
@@ -1,16 +1,19 @@
+#pragma language glsl1
 extern float transparency;
-extern int shift;
+extern float shift;
 extern vec4 baseColors[6];
 extern vec4 activeColors[6];
 
 extern float time;           // passage of time
 extern float sinTime;
-extern float cellDensity = 25;
+extern float cellDensity;
+//extern float cellDensity = 25;
 
-extern float strength = 0.005;
+extern float strength;
+//extern float strength = 0.005;
 float speed           = 0.125;
-float angleOffset     = 30; 
-float angleSpeed      = 10;
+float angleOffset     = 30.0; 
+float angleSpeed      = 10.0;
 
 /////////////
 // VORONOI //
@@ -88,12 +91,12 @@
     vec4 raw   = Texel ( texture, coord );
     vec4 color = vec4  (0,0,0,raw.a);  
 
-    color     += int(raw == baseColors[5]) * activeColors[int(max(min(5+shift,5),1))];
-    color     += int(raw == baseColors[4]) * activeColors[int(max(min(4+shift,5),1))];
-    color     += int(raw == baseColors[3]) * activeColors[int(max(min(3+shift,5),1))];
-    color     += int(raw == baseColors[2]) * activeColors[int(max(min(2+shift,5),1))];
-    color     += int(raw == baseColors[1]) * activeColors[int(max(min(1+shift,5),1))];
-    color     += int(raw == baseColors[0]) * activeColors[0];
+    color     += float(raw == baseColors[5]) * activeColors[int(max(min(5.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[4]) * activeColors[int(max(min(4.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[3]) * activeColors[int(max(min(3.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[2]) * activeColors[int(max(min(2.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[1]) * activeColors[int(max(min(1.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[0]) * activeColors[0];
     color.a    = color.a * transparency;
     
     return vec4  ( color.r, color.g, color.b, color.a ); 
diff -ru gamedata/lua/gfx/shaders/hueShifterWithWhiteIntensifier.lua gamedata-patched/lua/gfx/shaders/hueShifterWithWhiteIntensifier.lua
--- gamedata/lua/gfx/shaders/hueShifterWithWhiteIntensifier.lua	2019-03-13 23:39:42.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/hueShifterWithWhiteIntensifier.lua	2024-04-20 17:46:49.538239616 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 // Black and white shader
 vec3 rgb2hsv(vec3 c)
 {
diff -ru gamedata/lua/gfx/shaders/paletteSwapper.lua gamedata-patched/lua/gfx/shaders/paletteSwapper.lua
--- gamedata/lua/gfx/shaders/paletteSwapper.lua	2019-03-13 23:38:30.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/paletteSwapper.lua	2024-04-20 17:46:49.541573025 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 extern vec3 outline;
 extern vec3 color1;
 extern vec3 color2;
@@ -9,13 +10,13 @@
     vec4 color = vec4(0,0,0,raw.a);  
 
     //Outline and first three colors are straight forward
-    color     += vec4(outline.r, outline.g, outline.b, raw.a ) * (1 - raw.r - raw.g - raw.b );
+    color     += vec4(outline.r, outline.g, outline.b, raw.a ) * (1.0 - raw.r - raw.g - raw.b );
     color     += vec4(color1.r, color1.g, color1.b, raw.a) * raw.r;
     color     += vec4(color2.r, color2.g, color2.b, raw.a) * raw.g;
     color     += vec4(color3.r, color3.g, color3.b, raw.a) * raw.b;
 
     //4th color is some trickery
-    color     -= color * min(floor((raw.r+raw.g+raw.b)/3), 1);
-    color     += vec4(color4.r, color4.g, color4.b, raw.a) * min(floor((raw.r+raw.g+raw.b)/3), 1);
+    color     -= color * min(floor((raw.r+raw.g+raw.b)/3.0), 1.0);
+    color     += vec4(color4.r, color4.g, color4.b, raw.a) * min(floor((raw.r+raw.g+raw.b)/3.0), 1.0);
     return color;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/paletteSwapper6.lua gamedata-patched/lua/gfx/shaders/paletteSwapper6.lua
--- gamedata/lua/gfx/shaders/paletteSwapper6.lua	2024-02-16 11:50:32.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/paletteSwapper6.lua	2024-04-20 17:46:49.538239616 +0100
@@ -1,9 +1,10 @@
-extern vec3 outline;
+#pragma language glsl1
 extern vec3 color1;
 extern vec3 color2;
 extern vec3 color3;
 extern vec3 color4;
 extern vec3 color5;
+extern vec3 outline;
 
 number when_eq(number x, number y) {
   return floor(1.0 - abs(sign(x-y)));
@@ -21,14 +22,14 @@
 {
     vec4 raw   = Texel ( texture, texturePos );
     vec3 color = vec3(0,0,0);  
-    number r   = floor(raw.r * 255.0f + 0.025f);
+    number r   = floor(raw.r * 255.0 + 0.025);
 
-    color     += when_eq ( r, 250) * color5;
-    color     += when_eq ( r, 200) * color4;
-    color     += when_eq ( r, 150) * color3;
-    color     += when_eq ( r, 100) * color2;
-    color     += when_eq ( r,  50) * color1;
-    color     += when_eq ( r,   0) * outline;
+    color     += when_eq ( r, 250.0) * color5;
+    color     += when_eq ( r, 200.0) * color4;
+    color     += when_eq ( r, 150.0) * color3;
+    color     += when_eq ( r, 100.0) * color2;
+    color     += when_eq ( r,  50.0) * color1;
+    color     += when_eq ( r,   0.0) * outline;
 
     return vec4(color.r, color.g, color.b, raw.a);
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/paletteSwapperAlpha.lua gamedata-patched/lua/gfx/shaders/paletteSwapperAlpha.lua
--- gamedata/lua/gfx/shaders/paletteSwapperAlpha.lua	2022-01-17 15:49:52.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/paletteSwapperAlpha.lua	2024-04-20 17:46:49.541573025 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 extern vec3 outline;
 extern vec3 color1;
 extern vec3 color2;
@@ -10,13 +11,13 @@
     vec4 color = vec4(0,0,0,raw.a * alpha);  
 
     //Outline and first three colors are straight forward
-    color     += vec4(outline.r, outline.g, outline.b, raw.a * alpha ) * (1 - raw.r - raw.g - raw.b );
+    color     += vec4(outline.r, outline.g, outline.b, raw.a * alpha ) * (1.0 - raw.r - raw.g - raw.b );
     color     += vec4(color1.r, color1.g, color1.b, raw.a * alpha) * raw.r;
     color     += vec4(color2.r, color2.g, color2.b, raw.a * alpha) * raw.g;
     color     += vec4(color3.r, color3.g, color3.b, raw.a * alpha) * raw.b;
 
     //4th color is some trickery
-    color     -= color * min(floor((raw.r+raw.g+raw.b)/3), 1);
-    color     += vec4(color4.r, color4.g, color4.b, raw.a * alpha) * min(floor((raw.r+raw.g+raw.b)/3), 1);
+    color     -= color * min(floor((raw.r+raw.g+raw.b)/3.0), 1.0);
+    color     += vec4(color4.r, color4.g, color4.b, raw.a * alpha) * min(floor((raw.r+raw.g+raw.b)/3.0), 1.0);
     return color;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/paletteSwapperDeluxe.lua gamedata-patched/lua/gfx/shaders/paletteSwapperDeluxe.lua
--- gamedata/lua/gfx/shaders/paletteSwapperDeluxe.lua	2021-01-25 18:37:32.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/paletteSwapperDeluxe.lua	2024-04-20 17:46:49.541573025 +0100
@@ -1,5 +1,6 @@
+#pragma language glsl1
 extern float transparency;
-extern int shift;
+extern float shift;
 extern vec4 baseColors[6];
 extern vec4 activeColors[6];
 
@@ -8,12 +9,12 @@
     vec4 raw   = Texel ( texture, texturePos );
     vec4 color = vec4  (0,0,0,raw.a);  
 
-    color     += int(raw == baseColors[5]) * activeColors[int(max(min(5+shift,5),1))];
-    color     += int(raw == baseColors[4]) * activeColors[int(max(min(4+shift,5),1))];
-    color     += int(raw == baseColors[3]) * activeColors[int(max(min(3+shift,5),1))];
-    color     += int(raw == baseColors[2]) * activeColors[int(max(min(2+shift,5),1))];
-    color     += int(raw == baseColors[1]) * activeColors[int(max(min(1+shift,5),1))];
-    color     += int(raw == baseColors[0]) * activeColors[0];
+    color     += float(raw == baseColors[5]) * activeColors[int(max(min(5.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[4]) * activeColors[int(max(min(4.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[3]) * activeColors[int(max(min(3.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[2]) * activeColors[int(max(min(2.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[1]) * activeColors[int(max(min(1.0+shift,5.0),1.0))];
+    color     += float(raw == baseColors[0]) * activeColors[0];
     color.a    = color.a*transparency;
     return color;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/paletteSwapperUnicode.lua gamedata-patched/lua/gfx/shaders/paletteSwapperUnicode.lua
--- gamedata/lua/gfx/shaders/paletteSwapperUnicode.lua	2019-03-13 23:38:20.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/paletteSwapperUnicode.lua	2024-04-20 17:46:49.541573025 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 extern vec3 colorHigh;       // middle color
 extern vec3 colorLow;        // top and bottom color
 extern number startThresold; // y position of the letter on the screen
@@ -19,8 +20,8 @@
     vec4 raw   = Texel ( texture, texturePos );
     vec4 color = vec4(0,0,0,raw.a);  
 
-    color     += max(when_gt(number(startThresold+3.0f), number(screenPos.y)), when_lt(number(startThresold+8.0f), number(screenPos.y))) * (vec4(colorLow.r, colorLow.g, colorLow.b, raw.a) * raw.a);
-    color     += when_eq(when_lt(number(startThresold+3.0f), number(screenPos.y)), when_gt(number(startThresold+8.0f), number(screenPos.y))) * (vec4(colorHigh.r, colorHigh.g, colorHigh.b, raw.a) * raw.a);
+    color     += max(when_gt(number(startThresold+3.0), number(screenPos.y)), when_lt(number(startThresold+8.0), number(screenPos.y))) * (vec4(colorLow.r, colorLow.g, colorLow.b, raw.a) * raw.a);
+    color     += when_eq(when_lt(number(startThresold+3.0), number(screenPos.y)), when_gt(number(startThresold+8.0), number(screenPos.y))) * (vec4(colorHigh.r, colorHigh.g, colorHigh.b, raw.a) * raw.a);
 
     return color;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/playerShader.lua gamedata-patched/lua/gfx/shaders/playerShader.lua
--- gamedata/lua/gfx/shaders/playerShader.lua	2019-04-14 01:58:10.000000000 +0100
+++ gamedata-patched/lua/gfx/shaders/playerShader.lua	2024-04-20 17:46:49.541573025 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 extern float whiteFactor;
 extern float chargeFactor;
 extern vec2 stepSize;
@@ -5,14 +6,14 @@
 vec4 effect(vec4 vcolor, Image tex, vec2 texcoord, vec2 pixcoord)
 {
     vec4 outputcolor = Texel(tex, texcoord) * vcolor;
-    number alpha = 4*Texel( tex, texcoord ).a;
-    alpha -= Texel( tex, texcoord + vec2( stepSize.x,   0.0f        ) ).a;
-    alpha -= Texel( tex, texcoord + vec2( -stepSize.x,  0.0f        ) ).a;
-    alpha -= Texel( tex, texcoord + vec2( 0.0f,         stepSize.y  ) ).a;
-    alpha -= Texel( tex, texcoord + vec2( 0.0f,         -stepSize.y ) ).a;
-    outputcolor.rgb += vec3(max(0,whiteFactor-alpha));
-    outputcolor.r += max(0,(chargeFactor-alpha)*1.2);
-    outputcolor.g += max(0,(chargeFactor-alpha)*0.25f);
-    //outputcolor.b += max(0,(chargeFactor-alpha)/7.0f);
+    float alpha = 4.0*Texel( tex, texcoord ).a;
+    alpha -= Texel( tex, texcoord + vec2( stepSize.x,   0.0        ) ).a;
+    alpha -= Texel( tex, texcoord + vec2( -stepSize.x,  0.0        ) ).a;
+    alpha -= Texel( tex, texcoord + vec2( 0.0,         stepSize.y  ) ).a;
+    alpha -= Texel( tex, texcoord + vec2( 0.0,         -stepSize.y ) ).a;
+    outputcolor.rgb += vec3(max(0.0,whiteFactor-alpha));
+    outputcolor.r += max(0.0,(chargeFactor-alpha)*1.2);
+    outputcolor.g += max(0.0,(chargeFactor-alpha)*0.25);
+    //outputcolor.b += max(0,(chargeFactor-alpha)/7.0);
     return outputcolor;
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/posterizer.lua gamedata-patched/lua/gfx/shaders/posterizer.lua
--- gamedata/lua/gfx/shaders/posterizer.lua	2019-03-13 23:41:02.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/posterizer.lua	2024-04-20 17:46:49.544906435 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 /*
 
 File:
@@ -39,7 +40,7 @@
 
     //Get the palette color from the HSV value
     vec4 paletteColor;
-    paletteColor = texture2D(paletteTexture, vec2(hsv.r+.01f, 1.225f-hsv.b));
+    paletteColor = texture2D(paletteTexture, vec2(hsv.r+.01, 1.225-hsv.b));
     //Result
     return vec4(paletteColor.rgb, spriteColor.a);
 }
\ No newline at end of file
diff -ru gamedata/lua/gfx/shaders/replaceColorShader.lua gamedata-patched/lua/gfx/shaders/replaceColorShader.lua
--- gamedata/lua/gfx/shaders/replaceColorShader.lua	2021-09-13 15:05:42.000000000 +0100
+++ gamedata-patched/lua/gfx/shaders/replaceColorShader.lua	2024-04-20 17:46:49.544906435 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 extern vec4 color;
 vec4 effect( vec4 col, Image texture, vec2 texturePos, vec2 screenPos )
 {
diff -ru gamedata/lua/gfx/shaders/rowOffsetShader.lua gamedata-patched/lua/gfx/shaders/rowOffsetShader.lua
--- gamedata/lua/gfx/shaders/rowOffsetShader.lua	2022-12-02 16:34:30.000000000 +0000
+++ gamedata-patched/lua/gfx/shaders/rowOffsetShader.lua	2024-04-20 17:46:49.544906435 +0100
@@ -1,3 +1,4 @@
+#pragma language glsl1
 extern float time;
 extern float strength;
 
@@ -22,12 +23,12 @@
 {
   vec2 uv = texturePos.xy; 
 
-  if (mod(screenPos.y,2) < 0.95 ) {
+  if (mod(screenPos.y,2.0) < 0.95 ) { // ?
     uv.x   += express(uv.y, time, strength);
-    uv.x    = mod ( uv.x, 400 );
+    uv.x    = mod ( uv.x, 400.0 );
   } else {
     uv.x   -= express(uv.y, time, strength);
-    uv.x    = mod ( uv.x, 400 );
+    uv.x    = mod ( uv.x, 400.0 );
   }
   /*
   if (mod(screenPos.x,2) < 0.95 ) {
diff -ru gamedata/window.lua gamedata-patched/window.lua
--- gamedata/window.lua	2023-12-27 21:12:04.000000000 +0000
+++ gamedata-patched/window.lua	2024-04-20 17:46:49.548239844 +0100
@@ -49,10 +49,10 @@
 local _fullScreenTypes = {"desktop","exclusive" }
 local _modeSorter      = function(a, b) return a.width*a.height < b.width*b.height end
 function updateWindowMode ()
-  GLOBAL_SETTINGS.FULLSCREEN_TYPE         = ensureNumber  ( GLOBAL_SETTINGS.FULLSCREEN_TYPE, 1, 2, 1, true )
+  GLOBAL_SETTINGS.FULLSCREEN_TYPE         = ensureNumber  ( GLOBAL_SETTINGS.FULLSCREEN_TYPE, 1, 2, 2, true )
   GLOBAL_SETTINGS.DISPLAY                 = ensureNumber  ( GLOBAL_SETTINGS.DISPLAY, 1, love.window.getDisplayCount(), 1, true )
   GLOBAL_SETTINGS.RESOLUTION_MULTIPLIER   = ensureNumber  ( GLOBAL_SETTINGS.RESOLUTION_MULTIPLIER, 1, 8, 2, true )
-  GLOBAL_SETTINGS.FULLSCREEN              = ensureBoolean ( GLOBAL_SETTINGS.FULLSCREEN,               false )
+  GLOBAL_SETTINGS.FULLSCREEN              = ensureBoolean ( GLOBAL_SETTINGS.FULLSCREEN,               true )
   GLOBAL_SETTINGS.VSYNC                   = ensureBoolean ( GLOBAL_SETTINGS.VSYNC,                    false )
   GLOBAL_SETTINGS.BORDERLESS_WINDOW       = ensureBoolean ( GLOBAL_SETTINGS.BORDERLESS_WINDOW,        false )
   GLOBAL_SETTINGS.GAME_WIDTH              = 400
diff -ru gamedata/lua/defaultSettings.lua gamedata-patched/lua/defaultSettings.lua
--- gamedata/lua/defaultSettings.lua 2024-04-20	18:48:14.237404134 +0100
+++ gamedata-patched/lua/defaultSettings.lua	2024-04-20 18:48:09.201990175 +0100
@@ -9,7 +9,7 @@
   DISPLAY                 = 1,
   FORCE_ASPECT_RATIO      = false,
   STRETCH_FULLSCREEN      = false,
-  FULLSCREEN_TYPE         = 1,
+  FULLSCREEN_TYPE         = 2,
   GRAPHICS_SMOOTHING      = 1,
   ANISOTROPY              = 0,
   BORDERLESS_WINDOW       = false,
