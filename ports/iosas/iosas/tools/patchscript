#!/bin/bash

if [ -d "/opt/system/Tools/PortMaster/" ]; then
  controlfolder="/opt/system/Tools/PortMaster"
elif [ -d "/opt/tools/PortMaster/" ]; then
  controlfolder="/opt/tools/PortMaster"
elif [ -d "$XDG_DATA_HOME/PortMaster/" ]; then
  controlfolder="$XDG_DATA_HOME/PortMaster"
else
  controlfolder="/roms/ports/PortMaster"
fi

# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export TMPDIR="$GAMEDIR/tmp"
export CONFIG="$GAMEDIR/saves/pm-config.ini"
export DATAFILE="iosas.port"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export PATH="$TOOLDIR:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

# Check for pm-config.ini, log if not found
if [ ! -f "$CONFIG" ]; then
    echo "Error: Configuration file ($CONFIG) not found!"
fi

cpu_check() {
    case "$DEVICE_CPU" in
        # CPUs with less than 1.5 GHz
        "a133plus"|"h700"|"RK3326")
            # Set frameskip and turn IdolSFX off for CPUs with less than 1.5 GHz
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=20/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=0/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
        
        # CPUs with 2 GHz or more
        "SD865"|"RK3388"|"RK3566"|"RK3399"|"S922X"|"x86_64")
            # Set frameskip to 0 (no frameskip) and leave IdolSFX on for CPUs with 2 GHz or more
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=0/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=1/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
        
        *)
            # Default case: set frameskip and turn IdolSFX off for other CPUs
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=20/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=0/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
    esac
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        output=$($TOOLDIR/xdelta3 -d -s "$DATADIR/data.win" -f "$TOOLDIR/patches/iosas.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
    else
        echo "No data.win file found to patch!"
    fi
}

compress_audio() {
    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
    fi
}

replace_font() {
    # Font replacements
    if [ -f "localization_fonts.csv" ]; then
        sed -i 's/malgun\.ttf/BMDOHYEON_ttf.ttf/g' localization_fonts.csv # Korean
        rm -rf malgun.ttf
        echo "Patched font files"
    fi
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        rm -rf assets
        mkdir -p saves
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"

    cpu_check
    echo "Applying xdelta patch"
    apply_xdelta
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    replace_font
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game