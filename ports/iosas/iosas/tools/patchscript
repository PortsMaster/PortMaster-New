#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    $ESUDO umount "$TOOLKIT"
    echo "Patching process failed."
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="iosas.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

# Check for pm-config.ini, log if not found
if [ ! -f "$CONFIG" ]; then
    echo "Error: Configuration file ($CONFIG) not found!"
    patch_failure
fi

cpu_check() {
    case "$DEVICE_CPU" in
        # CPUs with less than 1.5 GHz
        "a133plus"|"h700"|"RK3326")
            # Set frameskip and turn IdolSFX off for CPUs with less than 1.5 GHz
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=20/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=0/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
        
        # CPUs with 2 GHz or more
        "SD865"|"RK3388"|"RK3566"|"RK3399"|"S922X"|"x86_64")
            # Set frameskip to 0 (no frameskip) and leave IdolSFX on for CPUs with 2 GHz or more
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=0/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=1/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
        
        *)
            # Default case: set frameskip and turn IdolSFX off for other CPUs
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=20/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=0/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
    esac
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        #v1.2b
        md5_steam="f24efe2f28a3db2b5e4eaa5294dce25d"
        md5_itch="a93de5a86378c7aa7ad25ab7857b3e19"

        md5_current=$(md5sum "$DATADIR/data.win" | cut -d ' ' -f1)

        if [ ! -x "$controlfolder/xdelta3" ]; then
            echo "xdelta3 binary not found or not executable!"
            return 1
        fi

        if [ "$md5_current" = "$md5_steam" ]; then
        echo "Found Steam game version"
            patch="$TOOLDIR/patches/iosas_steam.xdelta"
        elif [ "$md5_current" = "$md5_itch" ] && [ -n "$md5_itch" ]; then
            echo "Found itch.io game version"
            patch="$TOOLDIR/patches/iosas_itchio.xdelta"
        else
            echo "Datafile does not match any supported versions!"
            mv "$LOGFILE" "$LOGERR"
            return 1
        fi

        output=$("$controlfolder/xdelta3" -d -s "$DATADIR/data.win" -f "$patch" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm -f "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            mv "$LOGFILE" "$LOGERR"
            return 1
        fi
    else
        echo "No data.win file found to patch!"
        return 1
    fi
}

compress_audio() {  
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        patch_failure
    fi
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        rm -rf $DATADIR/*
        mkdir -p saves
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"

    cpu_check
    echo "Applying xdelta patch"
    apply_xdelta || patch_failure
    sleep 1
    echo "Compressing audio..."
    compress_audio || patch_failure
    sleep 1
    echo "Finishing up..."
    zip_archive || patch_failure

    # Unmount runtimes
    $ESUDO umount "$TOOLKIT"
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
