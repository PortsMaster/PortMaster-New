#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
START_TIME=$(date +%s)

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export TOOLKIT="$controlfolder/utils/gmtoolkit"
export PATH="$TOOLKIT/gmtools:$TOOLKIT/utmt-cli.${DEVICE_ARCH}:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs.${DEVICE_ARCH}:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export LICENSEDIR="$GAMEDIR/licenses/pizzatower"
export DATAFILE="$GAMEDIR/pizzatower.port"
export TMPDIR="$GAMEDIR/tmp"

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Bail if the dotnet runtime is missing or wasn't mounted
if ! command -v dotnet >/dev/null 2>&1; then
    echo "Dotnet is required but not installed. Please install the runtime."
    echo "Patching process failed."
    exit 1
fi

prepare_assets() {
    # Delete files we don't need
    rm -rf "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR"/.gitkeep
    
    # Create the savedir
    mkdir -p "$SAVEDIR"
    
    # Temporarily move sounds to the savedir
    mv "$DATADIR/sound" "$SAVEDIR/sound"
    
    # Move game licenses to our license folder
    mkdir -p $LICENSEDIR
    [ -d "$DATADIR/licenses" ] && mv "$DATADIR/licenses/"* "$LICENSEDIR"
    rmdir "$DATADIR/licenses"
}

# Clean out $DATAFILE except for the library we need
purge_datafile() {
    # Clean and recreate the TMPDIR
    rm -rf "$TMPDIR" && mkdir -p "$TMPDIR"

    # Attempt to unzip
    if ! unzip -q "$DATAFILE" "lib/*" -d "$TMPDIR"; then
        echo "[PURGE_DATAFILE]: Failed to unzip $DATAFILE"
        exit 1
    fi

    # Remove unwanted architecture
    if [ -d "$TMPDIR/lib/armeabi-v7a" ]; then
        rm -rf "$TMPDIR/lib/armeabi-v7a"
        echo "Removed armeabi-v7a libraries"
    fi

    # Repackage the cleaned content
    rm -f "$DATAFILE"
    cd "$TMPDIR"

    if ! zip -r -0 -q "$GAMEDIR/$(basename "$DATAFILE")" .; then
        echo "[PURGE_DATAFILE]: Failed to create new datafile."
        exit 1
    fi

    cd "$GAMEDIR"
    echo "Data file repackaged successfully."
}

# Externalize game textures with compression
dump_textures() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Begin texture operations
    dotnet "$TOOLKIT/utmt-cli.${DEVICE_ARCH}/UndertaleModCli.dll" \
        dump "$DATADIR/data.win" \
        -e "$DATADIR/textures" "$DATADIR/game.droid"

    if [ $? -ne 0 ]; then
        echo "[DOTNET]: Patch failed to apply."
        exit 1
    else
        rm -f "$DATADIR/data.win"
        mv "$DATADIR/textures/" "$SAVEDIR/textures/"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

# Add assets to $DATAFILE
zip_archive() {
        echo "Finishing up..."
        zip -r -0 "$DATAFILE" ./assets/
        rm -rf "$DATADIR"/*
        mv "$SAVEDIR/sound" "$DATADIR/sound"
        mv "$SAVEDIR/textures" "$DATADIR/textures"
        sleep 1
}

# Main calls
process_game() {
    prepare_assets || { echo "Patching process failed."; exit 1; }
    purge_datafile || { echo "Patching process failed."; exit 1; }
    dump_textures || { echo "Patching process failed."; exit 1; }
    zip_archive || { echo "Patching process failed."; exit 1; }
    sleep 1
    
    # Measure time to complete
	END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    echo "Script completed in $DURATION seconds"
    
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
